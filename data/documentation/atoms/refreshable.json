{"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/refreshable"]}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","sections":[],"topicSections":[{"anchor":"Instance-Methods","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Refreshable\/refresh(context:)"],"generated":true,"title":"Instance Methods"}],"seeAlsoSections":[{"generated":true,"title":"Attributes","anchor":"Attributes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped","doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"]}],"metadata":{"symbolKind":"protocol","title":"Refreshable","externalID":"s:5Atoms11RefreshableP","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Refreshable","kind":"identifier"}],"roleHeading":"Protocol","modules":[{"name":"Atoms"}],"role":"symbol","navigatorTitle":[{"text":"Refreshable","kind":"identifier"}]},"relationshipsSections":[{"type":"inheritsFrom","title":"Inherits From","kind":"relationships","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Refreshable","kind":"identifier"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","text":"Atom","preciseIdentifier":"s:5Atoms4AtomP","kind":"typeIdentifier"}],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"It is useful when creating a wrapper atom and you want to transparently refresh the atom underneath."},{"text":" ","type":"text"},{"type":"text","text":"Note that the custom refresh will not be triggered when the atom is overridden."}],"type":"paragraph"},{"code":["struct UserAtom: ValueAtom, Refreshable, Hashable {","    func value(context: Context) -> AsyncPhase<User?, Never> {","        context.watch(FetchUserAtom().phase)","    }","","    func refresh(context: CurrentContext) async -> AsyncPhase<User?, Never> {","        await context.refresh(FetchUserAtom().phase)","    }","}","","private struct FetchUserAtom: TaskAtom, Hashable {","    func value(context: Context) async -> User? {","        await fetchUser()","    }","}"],"syntax":"swift","type":"codeListing"}]}],"references":{"doc://Atoms/documentation/Atoms/Refreshable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Refreshable"}],"role":"symbol","navigatorTitle":[{"text":"Refreshable","kind":"identifier"}],"url":"\/documentation\/atoms\/refreshable","abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","type":"topic","title":"Refreshable"},"doc://Atoms/documentation/Atoms/KeepAlive":{"title":"KeepAlive","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"KeepAlive","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"KeepAlive"}],"abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"text":" ","type":"text"},{"text":"even after they are no longer watched.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","url":"\/documentation\/atoms\/keepalive","kind":"symbol","type":"topic"},"doc://Atoms/documentation/Atoms":{"role":"collection","url":"\/documentation\/atoms","abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"title":"Atoms","type":"topic","kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms"},"doc://Atoms/documentation/Atoms/Scoped":{"role":"symbol","url":"\/documentation\/atoms\/scoped","kind":"symbol","title":"Scoped","abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"text":" ","type":"text"},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scoped"}],"navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped"},"doc://Atoms/documentation/Atoms/Refreshable/refresh(context:)":{"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable\/refresh(context:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"refresh","kind":"identifier"},{"kind":"text","text":"("},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CurrentContext","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP14CurrentContexta"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:5Atoms4AtomP8ProducedQa","text":"Produced","kind":"typeIdentifier"}],"role":"symbol","kind":"symbol","abstract":[{"text":"Refreshes and then return a result value.","type":"text"}],"url":"\/documentation\/atoms\/refreshable\/refresh(context:)","title":"refresh(context:)","required":true},"doc://Atoms/documentation/Atoms/Atom":{"kind":"symbol","title":"Atom","abstract":[{"text":"Declares that a type can produce a value that can be accessed from everywhere.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","url":"\/documentation\/atoms\/atom","navigatorTitle":[{"text":"Atom","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Atom"}],"type":"topic"},"doc://Atoms/documentation/Atoms/Resettable":{"role":"symbol","url":"\/documentation\/atoms\/resettable","kind":"symbol","title":"Resettable","type":"topic","abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom reset behavior."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Resettable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Resettable"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable"},"doc://Atoms/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Atoms\/s8SendableP"}}}