{"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped","doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"],"anchor":"Attributes","title":"Attributes"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Refreshable"},{"text":" : ","kind":"text"},{"text":"Atom","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"text":"It is useful when creating a wrapper atom and you want to transparently refresh the atom underneath.","type":"text"},{"type":"text","text":" "},{"text":"Note that the custom refresh will not be triggered when the atom is overridden.","type":"text"}],"type":"paragraph"},{"code":["struct UserAtom: ValueAtom, Refreshable, Hashable {","    func value(context: Context) -> AsyncPhase<User?, Never> {","        context.watch(FetchUserAtom().phase)","    }","","    func refresh(context: CurrentContext) async -> AsyncPhase<User?, Never> {","        await context.refresh(FetchUserAtom().phase)","    }","}","","private struct FetchUserAtom: TaskAtom, Hashable {","    func value(context: Context) async -> User? {","        await fetchUser()","    }","}"],"type":"codeListing","syntax":"swift"}]}],"variants":[{"paths":["\/documentation\/atoms\/refreshable"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"generated":true,"title":"Instance Methods","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Refreshable\/refresh(context:)"],"anchor":"Instance-Methods"}],"sections":[],"metadata":{"externalID":"s:5Atoms11RefreshableP","role":"symbol","navigatorTitle":[{"text":"Refreshable","kind":"identifier"}],"modules":[{"name":"Atoms"}],"roleHeading":"Protocol","symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Refreshable"}],"title":"Refreshable"},"abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"relationshipsSections":[{"type":"inheritsFrom","kind":"relationships","title":"Inherits From","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"]}],"references":{"doc://Atoms/documentation/Atoms":{"title":"Atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","kind":"symbol","role":"collection","url":"\/documentation\/atoms","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"type":"topic"},"doc://Atoms/documentation/Atoms/KeepAlive":{"abstract":[{"text":"An attribute protocol to allow the value of an atom to continue being retained","type":"text"},{"type":"text","text":" "},{"text":"even after they are no longer watched.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"KeepAlive","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","type":"topic","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"title":"KeepAlive","url":"\/documentation\/atoms\/keepalive","role":"symbol"},"doc://Atoms/documentation/Atoms/Refreshable":{"abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Refreshable"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","type":"topic","navigatorTitle":[{"text":"Refreshable","kind":"identifier"}],"title":"Refreshable","url":"\/documentation\/atoms\/refreshable","role":"symbol"},"doc://Atoms/documentation/Atoms/Refreshable/refresh(context:)":{"title":"refresh(context:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"refresh","kind":"identifier"},{"kind":"text","text":"("},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:5Atoms4AtomP14CurrentContexta","text":"CurrentContext","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:5Atoms4AtomP8ProducedQa","text":"Produced","kind":"typeIdentifier"}],"url":"\/documentation\/atoms\/refreshable\/refresh(context:)","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable\/refresh(context:)","kind":"symbol","type":"topic","abstract":[{"text":"Refreshes and then return a result value.","type":"text"}],"required":true},"doc://Atoms/documentation/Atoms/Scoped":{"abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scoped"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","type":"topic","navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"title":"Scoped","url":"\/documentation\/atoms\/scoped","role":"symbol"},"doc://Atoms/s8SendableP":{"identifier":"doc:\/\/Atoms\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Atoms/documentation/Atoms/Resettable":{"title":"Resettable","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"Resettable","kind":"identifier"}],"url":"\/documentation\/atoms\/resettable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Resettable"}],"kind":"symbol"},"doc://Atoms/documentation/Atoms/Atom":{"url":"\/documentation\/atoms\/atom","abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"role":"symbol","title":"Atom","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Atom"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom"}}}