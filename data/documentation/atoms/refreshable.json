{"metadata":{"role":"symbol","navigatorTitle":[{"text":"Refreshable","kind":"identifier"}],"title":"Refreshable","modules":[{"name":"Atoms"}],"roleHeading":"Protocol","externalID":"s:5Atoms11RefreshableP","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Refreshable"}],"symbolKind":"protocol"},"schemaVersion":{"major":0,"patch":0,"minor":3},"seeAlsoSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped","doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"],"generated":true,"title":"Attributes","anchor":"Attributes"}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/refreshable"]}],"abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"relationshipsSections":[{"title":"Inherits From","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"kind":"relationships","type":"inheritsFrom"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Refreshable"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"typeIdentifier","text":"Atom","preciseIdentifier":"s:5Atoms4AtomP"}]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is useful when creating a wrapper atom and you want to transparently refresh the atom underneath."},{"text":" ","type":"text"},{"type":"text","text":"Note that the custom refresh will not be triggered when the atom is overridden."}]},{"type":"codeListing","syntax":"swift","code":["struct UserAtom: ValueAtom, Refreshable, Hashable {","    func value(context: Context) -> AsyncPhase<User?, Never> {","        context.watch(FetchUserAtom().phase)","    }","","    func refresh(context: CurrentContext) async -> AsyncPhase<User?, Never> {","        await context.refresh(FetchUserAtom().phase)","    }","}","","private struct FetchUserAtom: TaskAtom, Hashable {","    func value(context: Context) async -> User? {","        await fetchUser()","    }","}"]}]}],"topicSections":[{"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Refreshable\/refresh(context:)"],"generated":true}],"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable"},"references":{"doc://Atoms/documentation/Atoms/Scoped":{"url":"\/documentation\/atoms\/scoped","title":"Scoped","role":"symbol","abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scoped"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Scoped"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped"},"doc://Atoms/documentation/Atoms/Resettable":{"role":"symbol","navigatorTitle":[{"text":"Resettable","kind":"identifier"}],"url":"\/documentation\/atoms\/resettable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resettable","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","type":"topic","abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom reset behavior."}],"title":"Resettable"},"doc://Atoms/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Atoms\/s8SendableP","title":"Swift.Sendable"},"doc://Atoms/documentation/Atoms/KeepAlive":{"role":"symbol","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"url":"\/documentation\/atoms\/keepalive","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"KeepAlive","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","type":"topic","abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"text":" ","type":"text"},{"type":"text","text":"even after they are no longer watched."}],"title":"KeepAlive"},"doc://Atoms/documentation/Atoms/Atom":{"type":"topic","url":"\/documentation\/atoms\/atom","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Atom"}],"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"navigatorTitle":[{"kind":"identifier","text":"Atom"}],"title":"Atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom"},"doc://Atoms/documentation/Atoms/Refreshable":{"kind":"symbol","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Refreshable","kind":"identifier"}],"role":"symbol","title":"Refreshable","abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom refresh behavior."}],"url":"\/documentation\/atoms\/refreshable","navigatorTitle":[{"kind":"identifier","text":"Refreshable"}]},"doc://Atoms/documentation/Atoms/Refreshable/refresh(context:)":{"kind":"symbol","url":"\/documentation\/atoms\/refreshable\/refresh(context:)","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable\/refresh(context:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"refresh"},{"kind":"text","text":"("},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:5Atoms4AtomP14CurrentContexta","kind":"typeIdentifier","text":"CurrentContext"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Produced","preciseIdentifier":"s:5Atoms4AtomP8ProducedQa","kind":"typeIdentifier"}],"type":"topic","title":"refresh(context:)","abstract":[{"type":"text","text":"Refreshes and then return a result value."}],"required":true,"role":"symbol"},"doc://Atoms/documentation/Atoms":{"type":"topic","url":"\/documentation\/atoms","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"title":"Atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms"}}}