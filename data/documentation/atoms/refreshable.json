{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"sections":[],"topicSections":[{"title":"Instance Methods","generated":true,"anchor":"Instance-Methods","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Refreshable\/refresh(context:)"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"symbolKind":"protocol","navigatorTitle":[{"kind":"identifier","text":"Refreshable"}],"modules":[{"name":"Atoms"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Refreshable"}],"title":"Refreshable","externalID":"s:5Atoms11RefreshableP","roleHeading":"Protocol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable"},"seeAlsoSections":[{"anchor":"Attributes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped","doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"],"generated":true,"title":"Attributes"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Refreshable","kind":"identifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","text":"Atom","preciseIdentifier":"s:5Atoms4AtomP","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"inlineContent":[{"type":"text","text":"It is useful when creating a wrapper atom and you want to transparently refresh the atom underneath."},{"type":"text","text":" "},{"text":"Note that the custom refresh will not be triggered when the atom is overridden.","type":"text"}],"type":"paragraph"},{"code":["struct UserAtom: ValueAtom, Refreshable, Hashable {","    func value(context: Context) -> AsyncPhase<User?, Never> {","        context.watch(FetchUserAtom().phase)","    }","","    func refresh(context: CurrentContext) async -> AsyncPhase<User?, Never> {","        await context.refresh(FetchUserAtom().phase)","    }","}","","private struct FetchUserAtom: TaskAtom, Hashable {","    func value(context: Context) async -> User? {","        await fetchUser()","    }","}"],"type":"codeListing","syntax":"swift"}]}],"relationshipsSections":[{"kind":"relationships","title":"Inherits From","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"type":"inheritsFrom"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/refreshable"]}],"abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"references":{"doc://Atoms/documentation/Atoms/Scoped":{"role":"symbol","url":"\/documentation\/atoms\/scoped","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Scoped","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","title":"Scoped","type":"topic","abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"navigatorTitle":[{"text":"Scoped","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Refreshable/refresh(context:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"refresh","kind":"identifier"},{"kind":"text","text":"("},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"CurrentContext","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP14CurrentContexta"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:5Atoms4AtomP8ProducedQa","text":"Produced","kind":"typeIdentifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable\/refresh(context:)","title":"refresh(context:)","kind":"symbol","type":"topic","abstract":[{"text":"Refreshes and then return a result value.","type":"text"}],"required":true,"url":"\/documentation\/atoms\/refreshable\/refresh(context:)","role":"symbol"},"doc://Atoms/documentation/Atoms/Atom":{"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"role":"symbol","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","navigatorTitle":[{"text":"Atom","kind":"identifier"}],"url":"\/documentation\/atoms\/atom","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Atom","kind":"identifier"}],"title":"Atom","kind":"symbol"},"doc://Atoms/documentation/Atoms":{"url":"\/documentation\/atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"type":"topic","kind":"symbol","title":"Atoms","role":"collection"},"doc://Atoms/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Atoms\/s8SendableP","type":"unresolvable"},"doc://Atoms/documentation/Atoms/Refreshable":{"title":"Refreshable","url":"\/documentation\/atoms\/refreshable","role":"symbol","type":"topic","navigatorTitle":[{"text":"Refreshable","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Refreshable","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable"},"doc://Atoms/documentation/Atoms/KeepAlive":{"url":"\/documentation\/atoms\/keepalive","abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"text":" ","type":"text"},{"type":"text","text":"even after they are no longer watched."}],"type":"topic","title":"KeepAlive","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"KeepAlive"}],"navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"kind":"symbol"},"doc://Atoms/documentation/Atoms/Resettable":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resettable","kind":"identifier"}],"title":"Resettable","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","url":"\/documentation\/atoms\/resettable","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Resettable"}],"abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}]}}}