{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive"},"relationshipsSections":[{"title":"Inherits From","kind":"relationships","type":"inheritsFrom","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"]}],"variants":[{"paths":["\/documentation\/atoms\/keepalive"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"abstract":[{"text":"An attribute protocol to allow the value of an atom to continue being retained","type":"text"},{"text":" ","type":"text"},{"text":"even after they are no longer watched.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"KeepAlive","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Atom","preciseIdentifier":"s:5Atoms4AtomP","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"Note that overridden or scoped atoms are not retained even with this attribute."}],"type":"paragraph"},{"anchor":"Example","type":"heading","text":"Example","level":2},{"code":["struct SharedPollingServiceAtom: ValueAtom, KeepAlive, Hashable {","    func value(context: Context) -> PollingService {","        PollingService()","    }","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"seeAlsoSections":[{"title":"Attributes","anchor":"Attributes","generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"modules":[{"name":"Atoms"}],"externalID":"s:5Atoms9KeepAliveP","symbolKind":"protocol","role":"symbol","title":"KeepAlive","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"KeepAlive","kind":"identifier"}],"roleHeading":"Protocol","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}]},"references":{"doc://Atoms/documentation/Atoms/Atom":{"title":"Atom","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"navigatorTitle":[{"text":"Atom","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","url":"\/documentation\/atoms\/atom"},"doc://Atoms/documentation/Atoms/Refreshable":{"title":"Refreshable","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","url":"\/documentation\/atoms\/refreshable","role":"symbol","abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Refreshable"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"Refreshable","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Resettable":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","role":"symbol","type":"topic","title":"Resettable","kind":"symbol","abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Resettable"}],"url":"\/documentation\/atoms\/resettable","navigatorTitle":[{"text":"Resettable","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Scoped":{"navigatorTitle":[{"kind":"identifier","text":"Scoped"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/atoms\/scoped","title":"Scoped","abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"text":" ","type":"text"},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}]},"doc://Atoms/documentation/Atoms":{"kind":"symbol","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms","url":"\/documentation\/atoms","type":"topic","role":"collection","title":"Atoms"},"doc://Atoms/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Atoms\/s8SendableP"},"doc://Atoms/documentation/Atoms/KeepAlive":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","role":"symbol","type":"topic","title":"KeepAlive","kind":"symbol","abstract":[{"text":"An attribute protocol to allow the value of an atom to continue being retained","type":"text"},{"type":"text","text":" "},{"text":"even after they are no longer watched.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"KeepAlive","kind":"identifier"}],"url":"\/documentation\/atoms\/keepalive","navigatorTitle":[{"kind":"identifier","text":"KeepAlive"}]}}}