{"abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"text":" ","type":"text"},{"text":"even after they are no longer watched.","type":"text"}],"relationshipsSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"title":"Inherits From","kind":"relationships","type":"inheritsFrom"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeepAlive"},{"kind":"text","text":" : "},{"text":"Atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Note","anchor":"Note","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Atoms that conform to this attribute and are either scoped using the "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","isActive":true,"type":"reference"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"or overridden via ","type":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope\/scopedOverride(_:with:)-5jen3","isActive":true,"type":"reference"},{"text":" are retained until their scope","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is dismantled from the view tree, after which they are released."}]},{"anchor":"Example","level":2,"type":"heading","text":"Example"},{"code":["struct SharedPollingServiceAtom: ValueAtom, KeepAlive, Hashable {","    func value(context: Context) -> PollingService {","        PollingService()","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"seeAlsoSections":[{"title":"Attributes","generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped"],"anchor":"Attributes"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/keepalive"]}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"sections":[],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","interfaceLanguage":"swift"},"kind":"symbol","metadata":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"KeepAlive"}],"symbolKind":"protocol","title":"KeepAlive","externalID":"s:5Atoms9KeepAliveP","role":"symbol","roleHeading":"Protocol","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"modules":[{"name":"Atoms"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://Atoms/documentation/Atoms/Atom":{"title":"Atom","url":"\/documentation\/atoms\/atom","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Atom","kind":"identifier"}],"navigatorTitle":[{"text":"Atom","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","abstract":[{"text":"Declares that a type can produce a value that can be accessed from everywhere.","type":"text"}]},"doc://Atoms/documentation/Atoms/AtomScope/scopedOverride(_:with:)-5jen3":{"abstract":[{"text":"Override the atoms used in this scope with the given value.","type":"text"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope\/scopedOverride(_:with:)-5jen3","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"scopedOverride","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Node"},{"kind":"text","text":">("},{"text":"Node","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"with","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Node","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Node","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Produced","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP8ProducedQa"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:5Atoms9AtomScopeV","text":"AtomScope","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":">"}],"url":"\/documentation\/atoms\/atomscope\/scopedoverride(_:with:)-5jen3","role":"symbol","title":"scopedOverride(_:with:)","kind":"symbol","type":"topic"},"doc://Atoms/documentation/Atoms":{"role":"collection","type":"topic","abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"kind":"symbol","title":"Atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","url":"\/documentation\/atoms"},"doc://Atoms/documentation/Atoms/KeepAlive":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"KeepAlive","kind":"identifier"}],"title":"KeepAlive","abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"type":"text","text":" "},{"type":"text","text":"even after they are no longer watched."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","type":"topic","url":"\/documentation\/atoms\/keepalive","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Scoped":{"abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"}],"url":"\/documentation\/atoms\/scoped","role":"symbol","title":"Scoped","kind":"symbol","type":"topic"},"doc://Atoms/s8SendableP":{"identifier":"doc:\/\/Atoms\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"}}}