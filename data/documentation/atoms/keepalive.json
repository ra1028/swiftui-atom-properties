{"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"relationshipsSections":[{"title":"Inherits From","kind":"relationships","type":"inheritsFrom","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"]}],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Attributes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"],"generated":true,"anchor":"Attributes"}],"kind":"symbol","metadata":{"role":"symbol","title":"KeepAlive","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"symbolKind":"protocol","externalID":"s:5Atoms9KeepAliveP","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"KeepAlive","kind":"identifier"}],"modules":[{"name":"Atoms"}],"roleHeading":"Protocol"},"sections":[],"abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"type":"text","text":" "},{"text":"even after they are no longer watched.","type":"text"}],"variants":[{"paths":["\/documentation\/atoms\/keepalive"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeepAlive"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:5Atoms4AtomP","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","text":"Atom","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"inlineContent":[{"text":"Note that overridden or scoped atoms are not retained even with this attribute.","type":"text"}],"type":"paragraph"},{"text":"Example","type":"heading","level":2,"anchor":"Example"},{"code":["struct SharedPollingServiceAtom: ValueAtom, KeepAlive, Hashable {","    func value(context: Context) -> PollingService {","        PollingService()","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://Atoms/documentation/Atoms/Resettable":{"kind":"symbol","url":"\/documentation\/atoms\/resettable","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","role":"symbol","title":"Resettable","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Resettable","kind":"identifier"}],"abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}],"navigatorTitle":[{"text":"Resettable","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Refreshable":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Refreshable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Refreshable"}],"abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom refresh behavior."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","title":"Refreshable","url":"\/documentation\/atoms\/refreshable"},"doc://Atoms/documentation/Atoms/Atom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"role":"symbol","type":"topic","title":"Atom","url":"\/documentation\/atoms\/atom","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"navigatorTitle":[{"text":"Atom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms":{"abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"title":"Atoms","type":"topic","url":"\/documentation\/atoms","role":"collection","identifier":"doc:\/\/Atoms\/documentation\/Atoms","kind":"symbol"},"doc://Atoms/documentation/Atoms/Scoped":{"url":"\/documentation\/atoms\/scoped","abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"}],"title":"Scoped","role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Scoped"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped"},"doc://Atoms/s8SendableP":{"identifier":"doc:\/\/Atoms\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Atoms/documentation/Atoms/KeepAlive":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeepAlive"}],"title":"KeepAlive","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","type":"topic","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"abstract":[{"text":"An attribute protocol to allow the value of an atom to continue being retained","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even after they are no longer watched."}],"url":"\/documentation\/atoms\/keepalive","kind":"symbol"}}}