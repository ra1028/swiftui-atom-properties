{"abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"type":"text","text":" "},{"type":"text","text":"even after they are no longer watched."}],"relationshipsSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"type":"inheritsFrom","kind":"relationships","title":"Inherits From"}],"metadata":{"role":"symbol","symbolKind":"protocol","externalID":"s:5Atoms9KeepAliveP","title":"KeepAlive","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"KeepAlive","kind":"identifier"}],"roleHeading":"Protocol","modules":[{"name":"Atoms"}],"navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}]},"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"sections":[],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"KeepAlive","kind":"identifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"typeIdentifier","text":"Atom","preciseIdentifier":"s:5Atoms4AtomP"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Note that overridden or scoped atoms are not retained even with this attribute.","type":"text"}]},{"anchor":"Example","level":2,"type":"heading","text":"Example"},{"syntax":"swift","type":"codeListing","code":["struct SharedPollingServiceAtom: ValueAtom, KeepAlive, Hashable {","    func value(context: Context) -> PollingService {","        PollingService()","    }","}"]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/keepalive"]}],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Attributes","generated":true,"anchor":"Attributes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://Atoms/documentation/Atoms/KeepAlive":{"url":"\/documentation\/atoms\/keepalive","abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"text":" ","type":"text"},{"type":"text","text":"even after they are no longer watched."}],"type":"topic","title":"KeepAlive","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"KeepAlive"}],"navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"kind":"symbol"},"doc://Atoms/documentation/Atoms/Atom":{"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"role":"symbol","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","navigatorTitle":[{"text":"Atom","kind":"identifier"}],"url":"\/documentation\/atoms\/atom","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Atom","kind":"identifier"}],"title":"Atom","kind":"symbol"},"doc://Atoms/documentation/Atoms/Refreshable":{"title":"Refreshable","url":"\/documentation\/atoms\/refreshable","role":"symbol","type":"topic","navigatorTitle":[{"text":"Refreshable","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Refreshable","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable"},"doc://Atoms/documentation/Atoms/Scoped":{"role":"symbol","url":"\/documentation\/atoms\/scoped","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Scoped","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","title":"Scoped","type":"topic","abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"navigatorTitle":[{"text":"Scoped","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Resettable":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resettable","kind":"identifier"}],"title":"Resettable","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","url":"\/documentation\/atoms\/resettable","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Resettable"}],"abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}]},"doc://Atoms/s8SendableP":{"identifier":"doc:\/\/Atoms\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Atoms/documentation/Atoms":{"url":"\/documentation\/atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"type":"topic","kind":"symbol","title":"Atoms","role":"collection"}}}