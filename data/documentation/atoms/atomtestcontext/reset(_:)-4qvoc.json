{"deprecationSummary":[{"inlineContent":[{"type":"text","text":"`Resettable` is deprecated. Use a custom reset function or other alternatives instead."}],"type":"paragraph"}],"sections":[],"abstract":[{"type":"text","text":"Calls arbitrary reset function of the given atom."}],"metadata":{"symbolKind":"method","role":"symbol","externalID":"s:5Atoms15AtomTestContextV5resetyyxAA10ResettableRzlF","platforms":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reset"},{"text":"(some ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5Atoms10ResettableP","text":"Resettable"},{"kind":"text","text":")"}],"title":"reset(_:)","modules":[{"name":"Atoms"}],"roleHeading":"Instance Method"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"@","kind":"attribute"},{"preciseIdentifier":"s:ScM","text":"MainActor","kind":"attribute"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"reset","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"atom"},{"text":": some ","kind":"text"},{"text":"Resettable","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","preciseIdentifier":"s:5Atoms10ResettableP","kind":"typeIdentifier"},{"kind":"text","text":")"}]}],"kind":"declarations"},{"parameters":[{"name":"atom","content":[{"type":"paragraph","inlineContent":[{"text":"An atom to reset.","type":"text"}]}]}],"kind":"parameters"},{"content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"This method only accepts atoms that conform to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable"},{"type":"text","text":" protocol."},{"text":" ","type":"text"},{"text":"Calls custom reset function of the given atom. Hence, it does not generate any new cache value or notify subscribers.","type":"text"}]},{"syntax":"swift","code":["let context = ...","print(context.watch(ResettableTextAtom()) \/\/ Prints \"Text\"","context[ResettableTextAtom()] = \"New text\"","print(context.read(ResettableTextAtom())) \/\/ Prints \"New text\"","context.reset(ResettableTextAtom()) \/\/ Calls the custom reset function","print(context.read(ResettableTextAtom())) \/\/ Prints \"New text\""],"type":"codeListing"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/atomtestcontext\/reset(_:)-4qvoc"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atoms\/documentation\/Atoms\/AtomTestContext\/reset(_:)-4qvoc"},"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms","doc:\/\/Atoms\/documentation\/Atoms\/AtomTestContext"]]},"kind":"symbol","references":{"doc://Atoms/documentation/Atoms/Resettable":{"deprecated":true,"type":"topic","role":"symbol","kind":"symbol","title":"Resettable","abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom reset behavior."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","navigatorTitle":[{"text":"Resettable","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Resettable","kind":"identifier"}],"url":"\/documentation\/atoms\/resettable"},"doc://Atoms/documentation/Atoms/AtomTestContext/reset(_:)-4qvoc":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reset","kind":"identifier"},{"kind":"text","text":"(some "},{"preciseIdentifier":"s:5Atoms10ResettableP","text":"Resettable","kind":"typeIdentifier"},{"text":")","kind":"text"}],"deprecated":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomTestContext\/reset(_:)-4qvoc","title":"reset(_:)","url":"\/documentation\/atoms\/atomtestcontext\/reset(_:)-4qvoc","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Calls arbitrary reset function of the given atom."}]},"doc://Atoms/documentation/Atoms/AtomTestContext":{"title":"AtomTestContext","role":"symbol","abstract":[{"type":"text","text":"A context structure to read, watch, and otherwise interact with atoms in testing."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomTestContext","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AtomTestContext","kind":"identifier"}],"type":"topic","url":"\/documentation\/atoms\/atomtestcontext","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomTestContext"}]},"doc://Atoms/documentation/Atoms":{"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms","kind":"symbol","title":"Atoms","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"role":"collection","url":"\/documentation\/atoms"}}}