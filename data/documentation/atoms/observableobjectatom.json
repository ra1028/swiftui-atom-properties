{"seeAlsoSections":[{"anchor":"Atoms","title":"Atoms","generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/ObjectType"],"anchor":"Associated-Types","generated":true,"title":"Associated Types"},{"title":"Instance Methods","generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/object(context:)"],"anchor":"Instance-Methods"}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"title":"Inherits From","type":"inheritsFrom"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/observableobjectatom"]}],"abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ObservableObjectAtom","kind":"identifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","text":"Atom","preciseIdentifier":"s:5Atoms4AtomP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"When published properties of the observable object provided through this atom changes, it","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"notifies updates to downstream atoms and views that are watching this atom."},{"type":"text","text":" "},{"type":"text","text":"In case you want to get another atom value from the context later by methods in that"},{"text":" ","type":"text"},{"text":"observable object, you can pass it as ","type":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"name":"Note","content":[{"inlineContent":[{"text":"If you watch other atoms through the context passed as parameter, the observable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"object itself will be re-created with fresh state when the watching atom is updated."}],"type":"paragraph"}],"type":"aside","style":"note"},{"level":2,"anchor":"Output-Value","text":"Output Value","type":"heading"},{"inlineContent":[{"text":"Self.ObjectType","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Example","text":"Example","type":"heading"},{"syntax":"swift","type":"codeListing","code":["class Contact: ObservableObject {","    @Published var name = \"\"","    @Published var age = 20","","    func haveBirthday() {","        age += 1","    }","}","","struct ContactAtom: ObservableObjectAtom, Hashable {","    func object(context: Context) -> Contact {","        Contact()","    }","}","","struct ContactView: View {","    @WatchStateObject(ContactAtom())","    var contact","","    var body: some View {","        VStack {","            TextField(\"Enter your name\", text: $contact.name)","            Text(\"Age: \\(contact.age)\")","            Button(\"Celebrate your birthday!\") {","                contact.haveBirthday()","            }","        }","    }","}"]}]}],"metadata":{"navigatorTitle":[{"kind":"identifier","text":"ObservableObjectAtom"}],"symbolKind":"protocol","title":"ObservableObjectAtom","externalID":"s:5Atoms20ObservableObjectAtomP","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ObservableObjectAtom","kind":"identifier"}],"modules":[{"name":"Atoms"}],"roleHeading":"Protocol","role":"symbol"},"references":{"doc://Atoms/documentation/Atoms/Atom":{"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Atom","kind":"identifier"}],"url":"\/documentation\/atoms\/atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","navigatorTitle":[{"text":"Atom","kind":"identifier"}],"role":"symbol","type":"topic","title":"Atom"},"doc://Atoms/documentation/Atoms/AsyncSequenceAtom":{"type":"topic","title":"AsyncSequenceAtom","kind":"symbol","url":"\/documentation\/atoms\/asyncsequenceatom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","abstract":[{"type":"text","text":"An atom type that provides asynchronous, sequential elements of the given "},{"code":"AsyncSequence","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"as an "},{"isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","type":"reference"},{"type":"text","text":" value."}],"navigatorTitle":[{"text":"AsyncSequenceAtom","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncSequenceAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/AsyncPhaseAtom":{"title":"AsyncPhaseAtom","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncPhaseAtom"}],"kind":"symbol","abstract":[{"text":"An atom that provides an ","type":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","type":"reference","isActive":true},{"type":"text","text":" value from the asynchronous throwable function."}],"url":"\/documentation\/atoms\/asyncphaseatom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","navigatorTitle":[{"text":"AsyncPhaseAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/AtomContext":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"AtomContext","kind":"identifier"}],"title":"AtomContext","url":"\/documentation\/atoms\/atomcontext","type":"topic","abstract":[{"text":"A context structure to read, write, and otherwise interact with atoms.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"AtomContext"}],"role":"symbol"},"doc://Atoms/documentation/Atoms/ValueAtom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValueAtom","kind":"identifier"}],"title":"ValueAtom","url":"\/documentation\/atoms\/valueatom","type":"topic","abstract":[{"text":"An atom type that provides a read-only value.","type":"text"}],"navigatorTitle":[{"text":"ValueAtom","kind":"identifier"}],"role":"symbol"},"doc://Atoms/documentation/Atoms/ObservableObjectAtom/ObjectType":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/ObjectType","url":"\/documentation\/atoms\/observableobjectatom\/objecttype","abstract":[{"type":"text","text":"The type of observable object that this atom produces."}],"type":"topic","kind":"symbol","required":true,"role":"symbol","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObjectType"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"ObservableObject","preciseIdentifier":"s:7Combine16ObservableObjectP"}],"title":"ObjectType"},"doc://Atoms/documentation/Atoms/ObservableObjectAtom/object(context:)":{"url":"\/documentation\/atoms\/observableobjectatom\/object(context:)","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"object"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP7Contexta","text":"Context"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5Atoms20ObservableObjectAtomP0C4TypeQa","text":"ObjectType"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/object(context:)","required":true,"abstract":[{"type":"text","text":"Creates an observed object when this atom is actually used."}],"role":"symbol","title":"object(context:)"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","navigatorTitle":[{"text":"ModifiedAtom","kind":"identifier"}],"abstract":[{"text":"An atom type that applies a modifier to an atom.","type":"text"}],"kind":"symbol","url":"\/documentation\/atoms\/modifiedatom","title":"ModifiedAtom","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ModifiedAtom"}],"type":"topic"},"doc://Atoms/documentation/Atoms/TaskAtom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskAtom"}],"title":"TaskAtom","url":"\/documentation\/atoms\/taskatom","type":"topic","abstract":[{"type":"text","text":"An atom type that provides a nonthrowing "},{"type":"codeVoice","code":"Task"},{"text":" from the given asynchronous function.","type":"text"}],"navigatorTitle":[{"text":"TaskAtom","kind":"identifier"}],"role":"symbol"},"doc://Atoms/documentation/Atoms/AsyncPhase":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"AsyncPhase","kind":"identifier"}],"abstract":[{"text":"A value that represents a success, a failure, or a state in which the result of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"asynchronous process has not yet been determined."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncPhase"}],"url":"\/documentation\/atoms\/asyncphase","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","role":"symbol","title":"AsyncPhase"},"doc://Atoms/documentation/Atoms/ThrowingTaskAtom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ThrowingTaskAtom"}],"url":"\/documentation\/atoms\/throwingtaskatom","abstract":[{"type":"text","text":"An atom type that provides a throwing "},{"type":"codeVoice","code":"Task"},{"text":" from the given asynchronous, throwing function.","type":"text"}],"type":"topic","title":"ThrowingTaskAtom","navigatorTitle":[{"text":"ThrowingTaskAtom","kind":"identifier"}],"role":"symbol"},"doc://Atoms/documentation/Atoms/StateAtom":{"type":"topic","navigatorTitle":[{"text":"StateAtom","kind":"identifier"}],"url":"\/documentation\/atoms\/stateatom","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StateAtom","kind":"identifier"}],"abstract":[{"type":"text","text":"An atom type that provides a read-write state value."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","kind":"symbol","role":"symbol","title":"StateAtom"},"doc://Atoms/documentation/Atoms/PublisherAtom":{"type":"topic","title":"PublisherAtom","kind":"symbol","url":"\/documentation\/atoms\/publisheratom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","abstract":[{"type":"text","text":"An atom type that provides a sequence of values of the given "},{"type":"codeVoice","code":"Publisher"},{"text":" as an ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","type":"reference"},{"type":"text","text":" value."}],"navigatorTitle":[{"kind":"identifier","text":"PublisherAtom"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"PublisherAtom","kind":"identifier"}]},"doc://Atoms/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Atoms\/s8SendableP","title":"Swift.Sendable"},"doc://Atoms/documentation/Atoms":{"abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"kind":"symbol","url":"\/documentation\/atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","role":"collection","type":"topic","title":"Atoms"},"doc://Atoms/documentation/Atoms/ObservableObjectAtom":{"title":"ObservableObjectAtom","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}],"navigatorTitle":[{"kind":"identifier","text":"ObservableObjectAtom"}],"url":"\/documentation\/atoms\/observableobjectatom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ObservableObjectAtom","kind":"identifier"}]}}}