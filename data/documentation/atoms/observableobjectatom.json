{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/observableobjectatom"]}],"abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableObjectAtom","kind":"identifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:5Atoms4AtomP","text":"Atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"When published properties of the observable object provided through this atom changes, it","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"notifies updates to downstream atoms and views that are watching this atom."},{"text":" ","type":"text"},{"type":"text","text":"In case you want to get another atom value from the context later by methods in that"},{"type":"text","text":" "},{"text":"observable object, you can pass it as ","type":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If you watch other atoms through the context passed as parameter, the observable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"object itself will be re-created with fresh state when the watching atom is updated."}]}],"style":"note","name":"Note","type":"aside"},{"anchor":"Output-Value","level":2,"type":"heading","text":"Output Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Self.ObjectType"}]},{"level":2,"type":"heading","text":"Example","anchor":"Example"},{"type":"codeListing","syntax":"swift","code":["class Contact: ObservableObject {","    @Published var name = \"\"","    @Published var age = 20","","    func haveBirthday() {","        age += 1","    }","}","","struct ContactAtom: ObservableObjectAtom, Hashable {","    func object(context: Context) -> Contact {","        Contact()","    }","}","","struct ContactView: View {","    @WatchStateObject(ContactAtom())","    var contact","","    var body: some View {","        VStack {","            TextField(\"Enter your name\", text: $contact.name)","            Text(\"Age: \\(contact.age)\")","            Button(\"Celebrate your birthday!\") {","                contact.haveBirthday()","            }","        }","    }","}"]}]}],"sections":[],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","interfaceLanguage":"swift"},"metadata":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableObjectAtom"}],"symbolKind":"protocol","title":"ObservableObjectAtom","modules":[{"name":"Atoms"}],"role":"symbol","roleHeading":"Protocol","externalID":"s:5Atoms20ObservableObjectAtomP","navigatorTitle":[{"text":"ObservableObjectAtom","kind":"identifier"}]},"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/ObjectType"],"generated":true,"anchor":"Associated-Types","title":"Associated Types"},{"title":"Instance Methods","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/object(context:)"],"generated":true,"anchor":"Instance-Methods"}],"relationshipsSections":[{"title":"Inherits From","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"kind":"relationships","type":"inheritsFrom"}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"anchor":"Atoms","generated":true,"title":"Atoms","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"]}],"references":{"doc://Atoms/documentation/Atoms/Atom":{"title":"Atom","url":"\/documentation\/atoms\/atom","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Atom","kind":"identifier"}],"navigatorTitle":[{"text":"Atom","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","abstract":[{"text":"Declares that a type can produce a value that can be accessed from everywhere.","type":"text"}]},"doc://Atoms/documentation/Atoms/ThrowingTaskAtom":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"ThrowingTaskAtom","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ThrowingTaskAtom"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","title":"ThrowingTaskAtom","abstract":[{"type":"text","text":"An atom type that provides a throwing "},{"type":"codeVoice","code":"Task"},{"type":"text","text":" from the given asynchronous, throwing function."}],"url":"\/documentation\/atoms\/throwingtaskatom"},"doc://Atoms/documentation/Atoms/ObservableObjectAtom":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ObservableObjectAtom","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}],"navigatorTitle":[{"text":"ObservableObjectAtom","kind":"identifier"}],"url":"\/documentation\/atoms\/observableobjectatom","title":"ObservableObjectAtom","kind":"symbol","role":"symbol","type":"topic"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ModifiedAtom","kind":"identifier"}],"abstract":[{"text":"An atom type that applies a modifier to an atom.","type":"text"}],"url":"\/documentation\/atoms\/modifiedatom","kind":"symbol","navigatorTitle":[{"text":"ModifiedAtom","kind":"identifier"}],"type":"topic","title":"ModifiedAtom","role":"symbol"},"doc://Atoms/documentation/Atoms/AtomContext":{"title":"AtomContext","abstract":[{"type":"text","text":"A context structure to read, write, and otherwise interact with atoms."}],"url":"\/documentation\/atoms\/atomcontext","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomContext"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomContext"}]},"doc://Atoms/documentation/Atoms/ObservableObjectAtom/ObjectType":{"title":"ObjectType","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ObjectType"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Combine16ObservableObjectP","text":"ObservableObject"}],"type":"topic","url":"\/documentation\/atoms\/observableobjectatom\/objecttype","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/ObjectType","kind":"symbol","required":true,"abstract":[{"text":"The type of observable object that this atom produces.","type":"text"}],"role":"symbol"},"doc://Atoms/documentation/Atoms/AsyncPhaseAtom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncPhaseAtom"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncPhaseAtom"}],"url":"\/documentation\/atoms\/asyncphaseatom","title":"AsyncPhaseAtom","type":"topic","abstract":[{"type":"text","text":"An atom that provides an "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true,"type":"reference"},{"text":" value from the asynchronous throwable function.","type":"text"}],"kind":"symbol"},"doc://Atoms/documentation/Atoms/AsyncPhase":{"url":"\/documentation\/atoms\/asyncphase","kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","type":"topic","title":"AsyncPhase","role":"symbol","abstract":[{"type":"text","text":"A value that represents a success, a failure, or a state in which the result of"},{"type":"text","text":" "},{"text":"asynchronous process has not yet been determined.","type":"text"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncPhase","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AsyncPhase"}]},"doc://Atoms/documentation/Atoms/PublisherAtom":{"title":"PublisherAtom","abstract":[{"type":"text","text":"An atom type that provides a sequence of values of the given "},{"type":"codeVoice","code":"Publisher"},{"type":"text","text":" as an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase"},{"text":" value.","type":"text"}],"type":"topic","url":"\/documentation\/atoms\/publisheratom","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PublisherAtom"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","navigatorTitle":[{"kind":"identifier","text":"PublisherAtom"}]},"doc://Atoms/documentation/Atoms":{"role":"collection","type":"topic","abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"kind":"symbol","title":"Atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","url":"\/documentation\/atoms"},"doc://Atoms/documentation/Atoms/ValueAtom":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"ValueAtom","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ValueAtom","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","title":"ValueAtom","abstract":[{"type":"text","text":"An atom type that provides a read-only value."}],"url":"\/documentation\/atoms\/valueatom"},"doc://Atoms/documentation/Atoms/ObservableObjectAtom/object(context:)":{"abstract":[{"text":"Creates an observed object when this atom is actually used.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"object"},{"kind":"text","text":"("},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP7Contexta","text":"Context"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"ObjectType","preciseIdentifier":"s:5Atoms20ObservableObjectAtomP0C4TypeQa"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/object(context:)","url":"\/documentation\/atoms\/observableobjectatom\/object(context:)","title":"object(context:)","role":"symbol","required":true},"doc://Atoms/documentation/Atoms/TaskAtom":{"title":"TaskAtom","abstract":[{"type":"text","text":"An atom type that provides a nonthrowing "},{"type":"codeVoice","code":"Task"},{"type":"text","text":" from the given asynchronous function."}],"type":"topic","url":"\/documentation\/atoms\/taskatom","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TaskAtom"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","navigatorTitle":[{"text":"TaskAtom","kind":"identifier"}]},"doc://Atoms/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Atoms\/s8SendableP","type":"unresolvable"},"doc://Atoms/documentation/Atoms/StateAtom":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StateAtom"}],"type":"topic","url":"\/documentation\/atoms\/stateatom","kind":"symbol","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","navigatorTitle":[{"text":"StateAtom","kind":"identifier"}],"abstract":[{"type":"text","text":"An atom type that provides a read-write state value."}],"title":"StateAtom"},"doc://Atoms/documentation/Atoms/AsyncSequenceAtom":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncSequenceAtom"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"AsyncSequenceAtom","kind":"identifier"}],"kind":"symbol","title":"AsyncSequenceAtom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","abstract":[{"text":"An atom type that provides asynchronous, sequential elements of the given ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"as an "},{"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true},{"type":"text","text":" value."}],"url":"\/documentation\/atoms\/asyncsequenceatom"}}}