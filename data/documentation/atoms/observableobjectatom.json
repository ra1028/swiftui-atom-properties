{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ObservableObjectAtom","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP"}]}]},{"content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When published properties of the observable object provided through this atom changes, it"},{"type":"text","text":" "},{"text":"notifies updates to downstream atoms and views that are watching this atom.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In case you want to get another atom value from the context later by methods in that"},{"type":"text","text":" "},{"type":"text","text":"observable object, you can pass it as "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext"},{"text":".","type":"text"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you watch other atoms through the context passed as parameter, the observable"},{"type":"text","text":" "},{"type":"text","text":"object itself will be re-created with fresh state when the watching atom is updated."}]}],"type":"aside","style":"note"},{"text":"Output Value","level":2,"type":"heading","anchor":"Output-Value"},{"inlineContent":[{"type":"text","text":"Self.ObjectType"}],"type":"paragraph"},{"text":"Example","level":2,"anchor":"Example","type":"heading"},{"code":["class Contact: ObservableObject {","    @Published var name = \"\"","    @Published var age = 20","","    func haveBirthday() {","        age += 1","    }","}","","struct ContactAtom: ObservableObjectAtom, Hashable {","    func object(context: Context) -> Contact {","        Contact()","    }","}","","struct ContactView: View {","    @WatchStateObject(ContactAtom())","    var contact","","    var body: some View {","        VStack {","            TextField(\"Enter your name\", text: $contact.name)","            Text(\"Age: \\(contact.age)\")","            Button(\"Celebrate your birthday!\") {","                contact.haveBirthday()","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"abstract":[{"text":"An atom type that instantiates an observable object.","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"title":"Atoms","generated":true,"anchor":"Atoms"}],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"metadata":{"symbolKind":"protocol","modules":[{"name":"Atoms"}],"roleHeading":"Protocol","externalID":"s:5Atoms20ObservableObjectAtomP","role":"symbol","title":"ObservableObjectAtom","navigatorTitle":[{"kind":"identifier","text":"ObservableObjectAtom"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableObjectAtom"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/observableobjectatom"]}],"relationshipsSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"kind":"relationships","type":"inheritsFrom","title":"Inherits From"}],"topicSections":[{"title":"Associated Types","anchor":"Associated-Types","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/ObjectType"],"generated":true},{"title":"Instance Methods","anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/object(context:)"]}],"references":{"doc://Atoms/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Atoms\/s8SendableP"},"doc://Atoms/documentation/Atoms/TaskAtom":{"type":"topic","title":"TaskAtom","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TaskAtom","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","url":"\/documentation\/atoms\/taskatom","role":"symbol","abstract":[{"type":"text","text":"An atom type that provides a nonthrowing "},{"type":"codeVoice","code":"Task"},{"text":" from the given asynchronous function.","type":"text"}],"navigatorTitle":[{"text":"TaskAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/ObservableObjectAtom/ObjectType":{"type":"topic","abstract":[{"type":"text","text":"The type of observable object that this atom produces."}],"kind":"symbol","title":"ObjectType","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/ObjectType","url":"\/documentation\/atoms\/observableobjectatom\/objecttype","required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"ObjectType","kind":"identifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:7Combine16ObservableObjectP","kind":"typeIdentifier","text":"ObservableObject"}],"role":"symbol"},"doc://Atoms/documentation/Atoms/StateAtom":{"navigatorTitle":[{"kind":"identifier","text":"StateAtom"}],"url":"\/documentation\/atoms\/stateatom","role":"symbol","abstract":[{"type":"text","text":"An atom type that provides a read-write state value."}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","title":"StateAtom","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StateAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/ObservableObjectAtom/object(context:)":{"type":"topic","title":"object(context:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"object"},{"kind":"text","text":"("},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Context","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP7Contexta"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"ObjectType","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms20ObservableObjectAtomP0C4TypeQa"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/object(context:)","url":"\/documentation\/atoms\/observableobjectatom\/object(context:)","required":true,"abstract":[{"type":"text","text":"Creates an observed object when this atom is actually used."}],"role":"symbol"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"type":"topic","abstract":[{"type":"text","text":"An atom type that applies a modifier to an atom."}],"kind":"symbol","title":"ModifiedAtom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","url":"\/documentation\/atoms\/modifiedatom","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ModifiedAtom"}],"role":"symbol","navigatorTitle":[{"text":"ModifiedAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/ValueAtom":{"type":"topic","title":"ValueAtom","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ValueAtom","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","url":"\/documentation\/atoms\/valueatom","role":"symbol","abstract":[{"text":"An atom type that provides a read-only value.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ValueAtom"}]},"doc://Atoms/documentation/Atoms/AsyncPhase":{"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","abstract":[{"text":"A value that represents a success, a failure, or a state in which the result of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"asynchronous process has not yet been determined."}],"url":"\/documentation\/atoms\/asyncphase","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncPhase"}],"navigatorTitle":[{"text":"AsyncPhase","kind":"identifier"}],"title":"AsyncPhase","kind":"symbol"},"doc://Atoms/documentation/Atoms/AsyncSequenceAtom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","abstract":[{"type":"text","text":"An atom type that provides asynchronous, sequential elements of the given "},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"as an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase"},{"text":" value.","type":"text"}],"kind":"symbol","url":"\/documentation\/atoms\/asyncsequenceatom","type":"topic","role":"symbol","title":"AsyncSequenceAtom","navigatorTitle":[{"text":"AsyncSequenceAtom","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncSequenceAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/AsyncPhaseAtom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","abstract":[{"text":"An atom that provides an ","type":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true,"type":"reference"},{"type":"text","text":" value from the asynchronous throwable function."}],"kind":"symbol","url":"\/documentation\/atoms\/asyncphaseatom","type":"topic","role":"symbol","title":"AsyncPhaseAtom","navigatorTitle":[{"kind":"identifier","text":"AsyncPhaseAtom"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncPhaseAtom"}]},"doc://Atoms/documentation/Atoms/Atom":{"title":"Atom","url":"\/documentation\/atoms\/atom","kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Atom"}],"navigatorTitle":[{"text":"Atom","kind":"identifier"}],"abstract":[{"text":"Declares that a type can produce a value that can be accessed from everywhere.","type":"text"}]},"doc://Atoms/documentation/Atoms/ObservableObjectAtom":{"abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}],"type":"topic","navigatorTitle":[{"text":"ObservableObjectAtom","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/atoms\/observableobjectatom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","title":"ObservableObjectAtom","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableObjectAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/ThrowingTaskAtom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","abstract":[{"type":"text","text":"An atom type that provides a throwing "},{"code":"Task","type":"codeVoice"},{"type":"text","text":" from the given asynchronous, throwing function."}],"kind":"symbol","url":"\/documentation\/atoms\/throwingtaskatom","type":"topic","role":"symbol","title":"ThrowingTaskAtom","navigatorTitle":[{"text":"ThrowingTaskAtom","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ThrowingTaskAtom"}]},"doc://Atoms/documentation/Atoms/AtomContext":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext","abstract":[{"text":"A context structure to read, write, and otherwise interact with atoms.","type":"text"}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"AtomContext","kind":"identifier"}],"role":"symbol","title":"AtomContext","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AtomContext","kind":"identifier"}],"url":"\/documentation\/atoms\/atomcontext"},"doc://Atoms/documentation/Atoms":{"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms","kind":"symbol","title":"Atoms","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"role":"collection","url":"\/documentation\/atoms"},"doc://Atoms/documentation/Atoms/PublisherAtom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","abstract":[{"text":"An atom type that provides a sequence of values of the given ","type":"text"},{"type":"codeVoice","code":"Publisher"},{"type":"text","text":" as an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase"},{"text":" value.","type":"text"}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"PublisherAtom","kind":"identifier"}],"role":"symbol","title":"PublisherAtom","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"PublisherAtom","kind":"identifier"}],"url":"\/documentation\/atoms\/publisheratom"}}}