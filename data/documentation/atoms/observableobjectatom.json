{"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"title":"Atoms","anchor":"Atoms"}],"kind":"symbol","metadata":{"symbolKind":"protocol","navigatorTitle":[{"text":"ObservableObjectAtom","kind":"identifier"}],"externalID":"s:5Atoms20ObservableObjectAtomP","modules":[{"name":"Atoms"}],"roleHeading":"Protocol","role":"symbol","title":"ObservableObjectAtom","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableObjectAtom","kind":"identifier"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/ObjectType"],"generated":true,"anchor":"Associated-Types"},{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/object(context:)"],"generated":true,"anchor":"Instance-Methods","title":"Instance Methods"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableObjectAtom"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:5Atoms4AtomP","kind":"typeIdentifier","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","text":"Atom"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"inlineContent":[{"text":"When published properties of the observable object provided through this atom changes, it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"notifies updates to downstream atoms and views that are watching this atom."},{"type":"text","text":" "},{"text":"In case you want to get another atom value from the context later by methods in that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"observable object, you can pass it as "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"If you watch other atoms through the context passed as parameter, the observable"},{"type":"text","text":" "},{"text":"object itself will be re-created with fresh state when the watching atom is updated.","type":"text"}],"type":"paragraph"}]},{"level":2,"type":"heading","anchor":"Output-Value","text":"Output Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Self.ObjectType"}]},{"level":2,"text":"Example","anchor":"Example","type":"heading"},{"code":["class Contact: ObservableObject {","    @Published var name = \"\"","    @Published var age = 20","","    func haveBirthday() {","        age += 1","    }","}","","struct ContactAtom: ObservableObjectAtom, Hashable {","    func object(context: Context) -> Contact {","        Contact()","    }","}","","struct ContactView: View {","    @WatchStateObject(ContactAtom())","    var contact","","    var body: some View {","        VStack {","            TextField(\"Enter your name\", text: $contact.name)","            Text(\"Age: \\(contact.age)\")","            Button(\"Celebrate your birthday!\") {","                contact.haveBirthday()","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/observableobjectatom"]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom"},"abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}],"relationshipsSections":[{"type":"inheritsFrom","kind":"relationships","title":"Inherits From","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"]}],"references":{"doc://Atoms/documentation/Atoms/StateAtom":{"title":"StateAtom","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"StateAtom","kind":"identifier"}],"type":"topic","url":"\/documentation\/atoms\/stateatom","abstract":[{"type":"text","text":"An atom type that provides a read-write state value."}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"StateAtom"}]},"doc://Atoms/documentation/Atoms/ObservableObjectAtom/object(context:)":{"abstract":[{"type":"text","text":"Creates an observed object when this atom is actually used."}],"role":"symbol","required":true,"kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"object"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:5Atoms4AtomP7Contexta","text":"Context","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:5Atoms20ObservableObjectAtomP0C4TypeQa","text":"ObjectType"}],"title":"object(context:)","url":"\/documentation\/atoms\/observableobjectatom\/object(context:)","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/object(context:)"},"doc://Atoms/documentation/Atoms/AsyncPhaseAtom":{"navigatorTitle":[{"text":"AsyncPhaseAtom","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","url":"\/documentation\/atoms\/asyncphaseatom","abstract":[{"text":"An atom that provides an ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase"},{"text":" value from the asynchronous throwable function.","type":"text"}],"type":"topic","kind":"symbol","title":"AsyncPhaseAtom","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"AsyncPhaseAtom","kind":"identifier"}]},"doc://Atoms/s8SendableP":{"identifier":"doc:\/\/Atoms\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Atoms/documentation/Atoms/ObservableObjectAtom":{"title":"ObservableObjectAtom","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ObservableObjectAtom","kind":"identifier"}],"type":"topic","url":"\/documentation\/atoms\/observableobjectatom","abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ObservableObjectAtom"}]},"doc://Atoms/documentation/Atoms/PublisherAtom":{"role":"symbol","type":"topic","url":"\/documentation\/atoms\/publisheratom","kind":"symbol","abstract":[{"text":"An atom type that provides a sequence of values of the given ","type":"text"},{"type":"codeVoice","code":"Publisher"},{"type":"text","text":" as an "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","type":"reference","isActive":true},{"type":"text","text":" value."}],"navigatorTitle":[{"kind":"identifier","text":"PublisherAtom"}],"title":"PublisherAtom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"PublisherAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/AsyncPhase":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncPhase"}],"type":"topic","url":"\/documentation\/atoms\/asyncphase","abstract":[{"text":"A value that represents a success, a failure, or a state in which the result of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"asynchronous process has not yet been determined."}],"navigatorTitle":[{"text":"AsyncPhase","kind":"identifier"}],"title":"AsyncPhase"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"role":"symbol","title":"ModifiedAtom","url":"\/documentation\/atoms\/modifiedatom","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ModifiedAtom"}],"navigatorTitle":[{"text":"ModifiedAtom","kind":"identifier"}],"abstract":[{"type":"text","text":"An atom type that applies a modifier to an atom."}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","type":"topic"},"doc://Atoms/documentation/Atoms":{"kind":"symbol","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms","url":"\/documentation\/atoms","type":"topic","role":"collection","title":"Atoms"},"doc://Atoms/documentation/Atoms/AtomContext":{"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext","title":"AtomContext","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AtomContext"}],"url":"\/documentation\/atoms\/atomcontext","abstract":[{"type":"text","text":"A context structure to read, write, and otherwise interact with atoms."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomContext"}]},"doc://Atoms/documentation/Atoms/ObservableObjectAtom/ObjectType":{"title":"ObjectType","required":true,"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ObjectType"},{"kind":"text","text":" : "},{"text":"ObservableObject","preciseIdentifier":"s:7Combine16ObservableObjectP","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"The type of observable object that this atom produces."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/ObjectType","kind":"symbol","url":"\/documentation\/atoms\/observableobjectatom\/objecttype"},"doc://Atoms/documentation/Atoms/ThrowingTaskAtom":{"url":"\/documentation\/atoms\/throwingtaskatom","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ThrowingTaskAtom"}],"kind":"symbol","type":"topic","title":"ThrowingTaskAtom","navigatorTitle":[{"text":"ThrowingTaskAtom","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","role":"symbol","abstract":[{"type":"text","text":"An atom type that provides a throwing "},{"type":"codeVoice","code":"Task"},{"text":" from the given asynchronous, throwing function.","type":"text"}]},"doc://Atoms/documentation/Atoms/ValueAtom":{"url":"\/documentation\/atoms\/valueatom","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ValueAtom","kind":"identifier"}],"kind":"symbol","type":"topic","title":"ValueAtom","navigatorTitle":[{"kind":"identifier","text":"ValueAtom"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","role":"symbol","abstract":[{"text":"An atom type that provides a read-only value.","type":"text"}]},"doc://Atoms/documentation/Atoms/Atom":{"title":"Atom","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"navigatorTitle":[{"text":"Atom","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","url":"\/documentation\/atoms\/atom"},"doc://Atoms/documentation/Atoms/AsyncSequenceAtom":{"abstract":[{"text":"An atom type that provides asynchronous, sequential elements of the given ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":" ","type":"text"},{"type":"text","text":"as an "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","type":"reference","isActive":true},{"type":"text","text":" value."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","navigatorTitle":[{"text":"AsyncSequenceAtom","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/atoms\/asyncsequenceatom","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncSequenceAtom","kind":"identifier"}],"title":"AsyncSequenceAtom"},"doc://Atoms/documentation/Atoms/TaskAtom":{"role":"symbol","type":"topic","url":"\/documentation\/atoms\/taskatom","kind":"symbol","abstract":[{"type":"text","text":"An atom type that provides a nonthrowing "},{"code":"Task","type":"codeVoice"},{"text":" from the given asynchronous function.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"TaskAtom"}],"title":"TaskAtom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TaskAtom"}]}}}