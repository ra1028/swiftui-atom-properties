{"abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableObjectAtom","kind":"identifier"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:5Atoms4AtomP","text":"Atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When published properties of the observable object provided through this atom changes, it"},{"text":" ","type":"text"},{"text":"notifies updates to downstream atoms and views that are watching this atom.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In case you want to get another atom value from the context later by methods in that"},{"text":" ","type":"text"},{"type":"text","text":"observable object, you can pass it as "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext"},{"type":"text","text":"."}]},{"content":[{"inlineContent":[{"type":"text","text":"If you watch other atoms through the context passed as parameter, the observable"},{"text":" ","type":"text"},{"type":"text","text":"object itself will be re-created with fresh state when the watching atom is updated."}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"},{"anchor":"Output-Value","text":"Output Value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Self.ObjectType"}]},{"level":2,"type":"heading","text":"Example","anchor":"Example"},{"syntax":"swift","code":["class Contact: ObservableObject {","    @Published var name = \"\"","    @Published var age = 20","","    func haveBirthday() {","        age += 1","    }","}","","struct ContactAtom: ObservableObjectAtom, Hashable {","    func object(context: Context) -> Contact {","        Contact()","    }","}","","struct ContactView: View {","    @WatchStateObject(ContactAtom())","    var contact","","    var body: some View {","        VStack {","            TextField(\"Enter your name\", text: $contact.name)","            Text(\"Age: \\(contact.age)\")","            Button(\"Celebrate your birthday!\") {","                contact.haveBirthday()","            }","        }","    }","}"],"type":"codeListing"}]}],"topicSections":[{"generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/ObjectType"],"title":"Associated Types","anchor":"Associated-Types"},{"generated":true,"title":"Instance Methods","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/object(context:)"],"anchor":"Instance-Methods"}],"variants":[{"paths":["\/documentation\/atoms\/observableobjectatom"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"type":"inheritsFrom","title":"Inherits From"}],"seeAlsoSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"anchor":"Atoms","title":"Atoms","generated":true}],"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom"},"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"externalID":"s:5Atoms20ObservableObjectAtomP","title":"ObservableObjectAtom","navigatorTitle":[{"text":"ObservableObjectAtom","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableObjectAtom"}],"roleHeading":"Protocol","role":"symbol","modules":[{"name":"Atoms"}],"symbolKind":"protocol"},"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"references":{"doc://Atoms/documentation/Atoms/Atom":{"type":"topic","url":"\/documentation\/atoms\/atom","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Atom"}],"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"navigatorTitle":[{"kind":"identifier","text":"Atom"}],"title":"Atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom"},"doc://Atoms/documentation/Atoms":{"type":"topic","url":"\/documentation\/atoms","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"title":"Atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms"},"doc://Atoms/documentation/Atoms/StateAtom":{"abstract":[{"type":"text","text":"An atom type that provides a read-write state value."}],"navigatorTitle":[{"kind":"identifier","text":"StateAtom"}],"role":"symbol","url":"\/documentation\/atoms\/stateatom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","kind":"symbol","type":"topic","title":"StateAtom","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"StateAtom","kind":"identifier"}]},"doc://Atoms/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Atoms\/s8SendableP","title":"Swift.Sendable"},"doc://Atoms/documentation/Atoms/PublisherAtom":{"url":"\/documentation\/atoms\/publisheratom","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","abstract":[{"type":"text","text":"An atom type that provides a sequence of values of the given "},{"type":"codeVoice","code":"Publisher"},{"text":" as an ","type":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true,"type":"reference"},{"type":"text","text":" value."}],"title":"PublisherAtom","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PublisherAtom"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PublisherAtom"}]},"doc://Atoms/documentation/Atoms/ObservableObjectAtom":{"url":"\/documentation\/atoms\/observableobjectatom","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}],"title":"ObservableObjectAtom","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableObjectAtom"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ObservableObjectAtom"}]},"doc://Atoms/documentation/Atoms/ObservableObjectAtom/object(context:)":{"url":"\/documentation\/atoms\/observableobjectatom\/object(context:)","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/object(context:)","required":true,"abstract":[{"text":"Creates an observed object when this atom is actually used.","type":"text"}],"title":"object(context:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"object","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"context"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Context","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP7Contexta"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ObjectType","preciseIdentifier":"s:5Atoms20ObservableObjectAtomP0C4TypeQa"}],"kind":"symbol"},"doc://Atoms/documentation/Atoms/AsyncPhaseAtom":{"navigatorTitle":[{"kind":"identifier","text":"AsyncPhaseAtom"}],"kind":"symbol","url":"\/documentation\/atoms\/asyncphaseatom","type":"topic","title":"AsyncPhaseAtom","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","abstract":[{"type":"text","text":"An atom that provides an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase"},{"type":"text","text":" value from the asynchronous throwable function."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncPhaseAtom"}]},"doc://Atoms/documentation/Atoms/AtomContext":{"kind":"symbol","url":"\/documentation\/atoms\/atomcontext","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AtomContext","kind":"identifier"}],"type":"topic","title":"AtomContext","abstract":[{"text":"A context structure to read, write, and otherwise interact with atoms.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"AtomContext","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/ValueAtom":{"navigatorTitle":[{"kind":"identifier","text":"ValueAtom"}],"kind":"symbol","url":"\/documentation\/atoms\/valueatom","type":"topic","title":"ValueAtom","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","abstract":[{"text":"An atom type that provides a read-only value.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ValueAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/ObservableObjectAtom/ObjectType":{"role":"symbol","required":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/ObjectType","title":"ObjectType","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObjectType","kind":"identifier"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7Combine16ObservableObjectP","kind":"typeIdentifier","text":"ObservableObject"}],"abstract":[{"text":"The type of observable object that this atom produces.","type":"text"}],"type":"topic","url":"\/documentation\/atoms\/observableobjectatom\/objecttype","kind":"symbol"},"doc://Atoms/documentation/Atoms/AsyncSequenceAtom":{"navigatorTitle":[{"text":"AsyncSequenceAtom","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/atoms\/asyncsequenceatom","type":"topic","title":"AsyncSequenceAtom","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","abstract":[{"text":"An atom type that provides asynchronous, sequential elements of the given ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":" ","type":"text"},{"type":"text","text":"as an "},{"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true},{"type":"text","text":" value."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AsyncSequenceAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/ThrowingTaskAtom":{"navigatorTitle":[{"kind":"identifier","text":"ThrowingTaskAtom"}],"kind":"symbol","url":"\/documentation\/atoms\/throwingtaskatom","type":"topic","title":"ThrowingTaskAtom","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","abstract":[{"type":"text","text":"An atom type that provides a throwing "},{"code":"Task","type":"codeVoice"},{"type":"text","text":" from the given asynchronous, throwing function."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ThrowingTaskAtom"}]},"doc://Atoms/documentation/Atoms/AsyncPhase":{"url":"\/documentation\/atoms\/asyncphase","navigatorTitle":[{"kind":"identifier","text":"AsyncPhase"}],"kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncPhase"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","type":"topic","abstract":[{"type":"text","text":"A value that represents a success, a failure, or a state in which the result of"},{"type":"text","text":" "},{"type":"text","text":"asynchronous process has not yet been determined."}],"title":"AsyncPhase"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"navigatorTitle":[{"kind":"identifier","text":"ModifiedAtom"}],"kind":"symbol","url":"\/documentation\/atoms\/modifiedatom","type":"topic","title":"ModifiedAtom","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","abstract":[{"text":"An atom type that applies a modifier to an atom.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ModifiedAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/TaskAtom":{"url":"\/documentation\/atoms\/taskatom","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","abstract":[{"type":"text","text":"An atom type that provides a nonthrowing "},{"type":"codeVoice","code":"Task"},{"type":"text","text":" from the given asynchronous function."}],"title":"TaskAtom","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskAtom"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TaskAtom"}]}}}