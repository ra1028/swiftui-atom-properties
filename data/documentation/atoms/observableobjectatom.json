{"metadata":{"navigatorTitle":[{"kind":"identifier","text":"ObservableObjectAtom"}],"modules":[{"name":"Atoms"}],"role":"symbol","symbolKind":"protocol","externalID":"s:5Atoms20ObservableObjectAtomP","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableObjectAtom","kind":"identifier"}],"roleHeading":"Protocol","title":"ObservableObjectAtom"},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom"},"seeAlsoSections":[{"title":"Atoms","anchor":"Atoms","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"generated":true}],"topicSections":[{"title":"Associated Types","generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/ObjectType"],"anchor":"Associated-Types"},{"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/object(context:)"],"generated":true}],"relationshipsSections":[{"title":"Inherits From","type":"inheritsFrom","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"kind":"relationships"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableObjectAtom","kind":"identifier"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"typeIdentifier","text":"Atom","preciseIdentifier":"s:5Atoms4AtomP"}]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"inlineContent":[{"text":"When published properties of the observable object provided through this atom changes, it","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"notifies updates to downstream atoms and views that are watching this atom."},{"type":"text","text":" "},{"type":"text","text":"In case you want to get another atom value from the context later by methods in that"},{"text":" ","type":"text"},{"text":"observable object, you can pass it as ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"If you watch other atoms through the context passed as parameter, the observable","type":"text"},{"type":"text","text":" "},{"text":"object itself will be re-created with fresh state when the watching atom is updated.","type":"text"}]}],"name":"Note"},{"type":"heading","text":"Output Value","anchor":"Output-Value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Self.ObjectType"}]},{"text":"Example","level":2,"type":"heading","anchor":"Example"},{"syntax":"swift","type":"codeListing","code":["class Contact: ObservableObject {","    @Published var name = \"\"","    @Published var age = 20","","    func haveBirthday() {","        age += 1","    }","}","","struct ContactAtom: ObservableObjectAtom, Hashable {","    func object(context: Context) -> Contact {","        Contact()","    }","}","","struct ContactView: View {","    @WatchStateObject(ContactAtom())","    var contact","","    var body: some View {","        VStack {","            TextField(\"Enter your name\", text: $contact.name)","            Text(\"Age: \\(contact.age)\")","            Button(\"Celebrate your birthday!\") {","                contact.haveBirthday()","            }","        }","    }","}"]}]}],"variants":[{"paths":["\/documentation\/atoms\/observableobjectatom"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Atoms/documentation/Atoms/ObservableObjectAtom/object(context:)":{"role":"symbol","title":"object(context:)","abstract":[{"type":"text","text":"Creates an observed object when this atom is actually used."}],"required":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/object(context:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"object"},{"kind":"text","text":"("},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:5Atoms4AtomP7Contexta","kind":"typeIdentifier","text":"Context"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:5Atoms20ObservableObjectAtomP0C4TypeQa","text":"ObjectType","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/atoms\/observableobjectatom\/object(context:)"},"doc://Atoms/documentation/Atoms/StateAtom":{"abstract":[{"text":"An atom type that provides a read-write state value.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"StateAtom","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"StateAtom"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","url":"\/documentation\/atoms\/stateatom","title":"StateAtom"},"doc://Atoms/documentation/Atoms/AsyncSequenceAtom":{"abstract":[{"type":"text","text":"An atom type that provides asynchronous, sequential elements of the given "},{"code":"AsyncSequence","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"as an "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true,"type":"reference"},{"text":" value.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AsyncSequenceAtom","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncSequenceAtom"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","url":"\/documentation\/atoms\/asyncsequenceatom","title":"AsyncSequenceAtom"},"doc://Atoms/documentation/Atoms/PublisherAtom":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"PublisherAtom","kind":"identifier"}],"type":"topic","title":"PublisherAtom","navigatorTitle":[{"kind":"identifier","text":"PublisherAtom"}],"url":"\/documentation\/atoms\/publisheratom","kind":"symbol","abstract":[{"text":"An atom type that provides a sequence of values of the given ","type":"text"},{"code":"Publisher","type":"codeVoice"},{"type":"text","text":" as an "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true,"type":"reference"},{"text":" value.","type":"text"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"navigatorTitle":[{"kind":"identifier","text":"ModifiedAtom"}],"type":"topic","title":"ModifiedAtom","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","url":"\/documentation\/atoms\/modifiedatom","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ModifiedAtom","kind":"identifier"}],"abstract":[{"text":"An atom type that applies a modifier to an atom.","type":"text"}],"kind":"symbol"},"doc://Atoms/documentation/Atoms/ObservableObjectAtom":{"abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableObjectAtom","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ObservableObjectAtom"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","url":"\/documentation\/atoms\/observableobjectatom","title":"ObservableObjectAtom"},"doc://Atoms/s8SendableP":{"identifier":"doc:\/\/Atoms\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Atoms/documentation/Atoms/AsyncPhaseAtom":{"abstract":[{"type":"text","text":"An atom that provides an "},{"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true},{"type":"text","text":" value from the asynchronous throwable function."}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncPhaseAtom","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncPhaseAtom"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","url":"\/documentation\/atoms\/asyncphaseatom","title":"AsyncPhaseAtom"},"doc://Atoms/documentation/Atoms/AtomContext":{"abstract":[{"text":"A context structure to read, write, and otherwise interact with atoms.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AtomContext","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"AtomContext","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext","url":"\/documentation\/atoms\/atomcontext","title":"AtomContext"},"doc://Atoms/documentation/Atoms":{"abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"title":"Atoms","type":"topic","url":"\/documentation\/atoms","role":"collection","identifier":"doc:\/\/Atoms\/documentation\/Atoms","kind":"symbol"},"doc://Atoms/documentation/Atoms/ThrowingTaskAtom":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ThrowingTaskAtom"}],"type":"topic","title":"ThrowingTaskAtom","navigatorTitle":[{"text":"ThrowingTaskAtom","kind":"identifier"}],"url":"\/documentation\/atoms\/throwingtaskatom","kind":"symbol","abstract":[{"text":"An atom type that provides a throwing ","type":"text"},{"code":"Task","type":"codeVoice"},{"type":"text","text":" from the given asynchronous, throwing function."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom"},"doc://Atoms/documentation/Atoms/TaskAtom":{"abstract":[{"text":"An atom type that provides a nonthrowing ","type":"text"},{"code":"Task","type":"codeVoice"},{"text":" from the given asynchronous function.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"TaskAtom","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"TaskAtom","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","url":"\/documentation\/atoms\/taskatom","title":"TaskAtom"},"doc://Atoms/documentation/Atoms/Atom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"role":"symbol","type":"topic","title":"Atom","url":"\/documentation\/atoms\/atom","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"navigatorTitle":[{"text":"Atom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/ObservableObjectAtom/ObjectType":{"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"text":"ObjectType","kind":"identifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:7Combine16ObservableObjectP","text":"ObservableObject","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/atoms\/observableobjectatom\/objecttype","title":"ObjectType","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/ObjectType","required":true,"abstract":[{"type":"text","text":"The type of observable object that this atom produces."}],"kind":"symbol","role":"symbol"},"doc://Atoms/documentation/Atoms/ValueAtom":{"abstract":[{"text":"An atom type that provides a read-only value.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueAtom"}],"role":"symbol","navigatorTitle":[{"text":"ValueAtom","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","url":"\/documentation\/atoms\/valueatom","title":"ValueAtom"},"doc://Atoms/documentation/Atoms/AsyncPhase":{"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncPhase"}],"url":"\/documentation\/atoms\/asyncphase","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncPhase","kind":"identifier"}],"title":"AsyncPhase","abstract":[{"type":"text","text":"A value that represents a success, a failure, or a state in which the result of"},{"type":"text","text":" "},{"text":"asynchronous process has not yet been determined.","type":"text"}]}}}