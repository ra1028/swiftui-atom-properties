{"relationshipsSections":[{"type":"inheritsFrom","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"kind":"relationships","title":"Inherits From"}],"kind":"symbol","abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"topicSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Resettable\/reset(context:)"],"title":"Instance Methods","anchor":"Instance-Methods","generated":true}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Resettable"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:5Atoms4AtomP","kind":"typeIdentifier","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","text":"Atom"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"text","text":"It is useful when creating a wrapper atom and you want to transparently reset the atom underneath."},{"text":" ","type":"text"},{"text":"Note that the custom reset will not be triggered when the atom is overridden.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct UserAtom: ValueAtom, Resettable, Hashable {","    func value(context: Context) -> AsyncPhase<User?, Never> {","        context.watch(FetchUserAtom().phase)","    }","","    func reset(context: CurrentContext) {","        context.reset(FetchUserAtom())","    }","}","","private struct FetchUserAtom: TaskAtom, Hashable {","    func value(context: Context) async -> User? {","        await fetchUser()","    }","}"]}],"kind":"content"}],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Attributes","generated":true,"anchor":"Attributes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped","doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable"]}],"variants":[{"paths":["\/documentation\/atoms\/resettable"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Protocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Resettable"}],"externalID":"s:5Atoms10ResettableP","modules":[{"name":"Atoms"}],"symbolKind":"protocol","navigatorTitle":[{"text":"Resettable","kind":"identifier"}],"role":"symbol","title":"Resettable"},"references":{"doc://Atoms/documentation/Atoms/KeepAlive":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeepAlive"}],"title":"KeepAlive","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","type":"topic","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"abstract":[{"text":"An attribute protocol to allow the value of an atom to continue being retained","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even after they are no longer watched."}],"url":"\/documentation\/atoms\/keepalive","kind":"symbol"},"doc://Atoms/documentation/Atoms/Resettable":{"kind":"symbol","url":"\/documentation\/atoms\/resettable","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","role":"symbol","title":"Resettable","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Resettable","kind":"identifier"}],"abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}],"navigatorTitle":[{"text":"Resettable","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Atom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"role":"symbol","type":"topic","title":"Atom","url":"\/documentation\/atoms\/atom","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"navigatorTitle":[{"text":"Atom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Scoped":{"url":"\/documentation\/atoms\/scoped","abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"}],"title":"Scoped","role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Scoped"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped"},"doc://Atoms/documentation/Atoms/Resettable/reset(context:)":{"kind":"symbol","required":true,"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable\/reset(context:)","abstract":[{"text":"Arbitrary reset method to be executed on atom reset.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reset"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CurrentContext","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP14CurrentContexta"},{"kind":"text","text":")"}],"role":"symbol","title":"reset(context:)","url":"\/documentation\/atoms\/resettable\/reset(context:)"},"doc://Atoms/documentation/Atoms/Refreshable":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Refreshable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Refreshable"}],"abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom refresh behavior."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","title":"Refreshable","url":"\/documentation\/atoms\/refreshable"},"doc://Atoms/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Atoms\/s8SendableP"},"doc://Atoms/documentation/Atoms":{"abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"title":"Atoms","type":"topic","url":"\/documentation\/atoms","role":"collection","identifier":"doc:\/\/Atoms\/documentation\/Atoms","kind":"symbol"}}}