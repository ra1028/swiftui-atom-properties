{"abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom reset behavior."}],"relationshipsSections":[{"kind":"relationships","type":"inheritsFrom","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"title":"Inherits From"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Resettable","kind":"identifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:5Atoms4AtomP","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"typeIdentifier","text":"Atom"}]}]},{"kind":"content","content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is useful when creating a wrapper atom and you want to transparently reset the atom underneath."},{"type":"text","text":" "},{"type":"text","text":"Note that the custom reset will not be triggered when the atom is overridden."}]},{"type":"codeListing","syntax":"swift","code":["struct UserAtom: ValueAtom, Resettable, Hashable {","    func value(context: Context) -> AsyncPhase<User?, Never> {","        context.watch(FetchUserAtom().phase)","    }","","    func reset(context: CurrentContext) {","        context.reset(FetchUserAtom())","    }","}","","private struct FetchUserAtom: TaskAtom, Hashable {","    func value(context: Context) async -> User? {","        await fetchUser()","    }","}"]}]}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"topicSections":[{"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Resettable\/reset(context:)"],"generated":true}],"kind":"symbol","seeAlsoSections":[{"anchor":"Attributes","title":"Attributes","generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped","doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/resettable"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"metadata":{"symbolKind":"protocol","title":"Resettable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Resettable","kind":"identifier"}],"modules":[{"name":"Atoms"}],"role":"symbol","navigatorTitle":[{"text":"Resettable","kind":"identifier"}],"externalID":"s:5Atoms10ResettableP","roleHeading":"Protocol"},"references":{"doc://Atoms/documentation/Atoms":{"title":"Atoms","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"url":"\/documentation\/atoms","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms","role":"collection","kind":"symbol"},"doc://Atoms/documentation/Atoms/Resettable":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Resettable"}],"abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}],"url":"\/documentation\/atoms\/resettable","type":"topic","title":"Resettable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Resettable","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable"},"doc://Atoms/documentation/Atoms/Refreshable":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Refreshable"}],"abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"url":"\/documentation\/atoms\/refreshable","type":"topic","title":"Refreshable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Refreshable","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable"},"doc://Atoms/documentation/Atoms/KeepAlive":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","type":"topic","url":"\/documentation\/atoms\/keepalive","title":"KeepAlive","kind":"symbol","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"role":"symbol","abstract":[{"text":"An attribute protocol to allow the value of an atom to continue being retained","type":"text"},{"text":" ","type":"text"},{"text":"even after they are no longer watched.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"KeepAlive"}]},"doc://Atoms/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Atoms\/s8SendableP","type":"unresolvable"},"doc://Atoms/documentation/Atoms/Scoped":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"text":" ","type":"text"},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"url":"\/documentation\/atoms\/scoped","type":"topic","title":"Scoped","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped"},"doc://Atoms/documentation/Atoms/Atom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"symbol","abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Atom"}],"url":"\/documentation\/atoms\/atom","title":"Atom","role":"symbol","type":"topic"},"doc://Atoms/documentation/Atoms/Resettable/reset(context:)":{"required":true,"title":"reset(context:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reset"},{"kind":"text","text":"("},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP14CurrentContexta","text":"CurrentContext"},{"text":")","kind":"text"}],"abstract":[{"text":"Arbitrary reset method to be executed on atom reset.","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable\/reset(context:)","url":"\/documentation\/atoms\/resettable\/reset(context:)","type":"topic"}}}