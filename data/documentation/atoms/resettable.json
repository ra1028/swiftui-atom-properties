{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Resettable"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"Atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","preciseIdentifier":"s:5Atoms4AtomP"}],"platforms":["macOS"]}]},{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"It is useful when creating a wrapper atom and you want to transparently reset the atom underneath.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note that the custom reset will not be triggered when the atom is overridden."}]},{"code":["struct UserAtom: ValueAtom, Resettable, Hashable {","    func value(context: Context) -> AsyncPhase<User?, Never> {","        context.watch(FetchUserAtom().phase)","    }","","    func reset(context: CurrentContext) {","        context.reset(FetchUserAtom())","    }","}","","private struct FetchUserAtom: TaskAtom, Hashable {","    func value(context: Context) async -> User? {","        await fetchUser()","    }","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}],"topicSections":[{"generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Resettable\/reset(context:)"],"title":"Instance Methods","anchor":"Instance-Methods"}],"relationshipsSections":[{"title":"Inherits From","kind":"relationships","type":"inheritsFrom","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"]}],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"metadata":{"symbolKind":"protocol","modules":[{"name":"Atoms"}],"title":"Resettable","externalID":"s:5Atoms10ResettableP","roleHeading":"Protocol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Resettable"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Resettable","kind":"identifier"}]},"sections":[],"kind":"symbol","variants":[{"paths":["\/documentation\/atoms\/resettable"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"anchor":"Attributes","generated":true,"title":"Attributes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped","doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable"]}],"references":{"doc://Atoms/documentation/Atoms/Atom":{"url":"\/documentation\/atoms\/atom","abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"role":"symbol","title":"Atom","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Atom"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom"},"doc://Atoms/documentation/Atoms":{"title":"Atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","kind":"symbol","role":"collection","url":"\/documentation\/atoms","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"type":"topic"},"doc://Atoms/documentation/Atoms/Resettable":{"title":"Resettable","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"Resettable","kind":"identifier"}],"url":"\/documentation\/atoms\/resettable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Resettable"}],"kind":"symbol"},"doc://Atoms/documentation/Atoms/KeepAlive":{"abstract":[{"text":"An attribute protocol to allow the value of an atom to continue being retained","type":"text"},{"type":"text","text":" "},{"text":"even after they are no longer watched.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"KeepAlive","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","type":"topic","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"title":"KeepAlive","url":"\/documentation\/atoms\/keepalive","role":"symbol"},"doc://Atoms/documentation/Atoms/Refreshable":{"abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Refreshable"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","type":"topic","navigatorTitle":[{"text":"Refreshable","kind":"identifier"}],"title":"Refreshable","url":"\/documentation\/atoms\/refreshable","role":"symbol"},"doc://Atoms/documentation/Atoms/Scoped":{"abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scoped"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","type":"topic","navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"title":"Scoped","url":"\/documentation\/atoms\/scoped","role":"symbol"},"doc://Atoms/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Atoms\/s8SendableP"},"doc://Atoms/documentation/Atoms/Resettable/reset(context:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reset","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CurrentContext","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP14CurrentContexta"},{"text":")","kind":"text"}],"url":"\/documentation\/atoms\/resettable\/reset(context:)","title":"reset(context:)","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable\/reset(context:)","required":true,"role":"symbol","abstract":[{"text":"Arbitrary reset method to be executed on atom reset.","type":"text"}],"kind":"symbol","type":"topic"}}}