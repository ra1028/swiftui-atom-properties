{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/scoped"]}],"relationshipsSections":[{"kind":"relationships","title":"Inherits From","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"type":"inheritsFrom"},{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"type":"conformingTypes","title":"Conforming Types","kind":"relationships"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"],"anchor":"Attributes","title":"Attributes"}],"sections":[],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"text":" ","type":"text"},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"kind":"symbol","metadata":{"symbolKind":"protocol","roleHeading":"Protocol","title":"Scoped","modules":[{"name":"Atoms"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"}],"navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"externalID":"s:5Atoms6ScopedP"},"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"generated":true,"title":"Associated Types","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype"],"anchor":"Associated-Types"},{"title":"Instance Properties","generated":true,"anchor":"Instance-Properties","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scoped"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"typeIdentifier","text":"Atom","preciseIdentifier":"s:5Atoms4AtomP"}],"languages":["swift"]}]},{"content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If multiple scopes are nested, you can define an arbitrary "},{"code":"scopeID","type":"codeVoice"},{"type":"text","text":" to ensure that"},{"type":"text","text":" "},{"type":"text","text":"values are stored in a particular scope."},{"text":" ","type":"text"},{"type":"text","text":"The atom with "},{"code":"scopeID","type":"codeVoice"},{"type":"text","text":" searches for the nearest "},{"isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","type":"reference"},{"type":"text","text":" with the matching ID in"},{"type":"text","text":" "},{"text":"ancestor views, and if not found, the state is shared within the app.","type":"text"}]},{"inlineContent":[{"text":"Note that other atoms that depend on the scoped atom will be in a shared state and must be","type":"text"},{"type":"text","text":" "},{"text":"given this attribute as well in order to scope them as well.","type":"text"}],"type":"paragraph"},{"text":"Example","type":"heading","anchor":"Example","level":2},{"code":["struct SearchScopeID: Hashable {}","","struct SearchQueryAtom: StateAtom, Scoped, Hashable {","    var scopeID: SearchScopeID {","        SearchScopeID()","    }","","    func defaultValue(context: Context) -> String {","         \"\"","    }","}","","AtomScope(id: SearchScopeID()) {","    SearchPane()","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"references":{"doc://Atoms/documentation/Atoms/KeepAlive":{"title":"KeepAlive","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"KeepAlive","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"KeepAlive"}],"abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"text":" ","type":"text"},{"text":"even after they are no longer watched.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","url":"\/documentation\/atoms\/keepalive","kind":"symbol","type":"topic"},"doc://Atoms/documentation/Atoms/AtomScope":{"abstract":[{"text":"A view to override or monitor atoms in scope.","type":"text"}],"url":"\/documentation\/atoms\/atomscope","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AtomScope","kind":"identifier"}],"title":"AtomScope","type":"topic","navigatorTitle":[{"text":"AtomScope","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","kind":"symbol","role":"symbol"},"doc://Atoms/documentation/Atoms/Atom":{"kind":"symbol","title":"Atom","abstract":[{"text":"Declares that a type can produce a value that can be accessed from everywhere.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","url":"\/documentation\/atoms\/atom","navigatorTitle":[{"text":"Atom","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Atom"}],"type":"topic"},"doc://Atoms/documentation/Atoms/Resettable":{"role":"symbol","url":"\/documentation\/atoms\/resettable","kind":"symbol","title":"Resettable","type":"topic","abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom reset behavior."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Resettable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Resettable"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"type":"topic","abstract":[{"type":"text","text":"An atom type that applies a modifier to an atom."}],"url":"\/documentation\/atoms\/modifiedatom","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ModifiedAtom","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Node","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Scoped","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Modifier"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomModifier"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Node.Produced"},{"text":" is ","type":"text"},{"code":"Modifier.Base","type":"codeVoice"},{"type":"text","text":"."}]},"title":"ModifiedAtom","navigatorTitle":[{"kind":"identifier","text":"ModifiedAtom"}]},"doc://Atoms/documentation/Atoms/Refreshable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Refreshable"}],"role":"symbol","navigatorTitle":[{"text":"Refreshable","kind":"identifier"}],"url":"\/documentation\/atoms\/refreshable","abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","type":"topic","title":"Refreshable"},"doc://Atoms/documentation/Atoms/Scoped/ScopeID-swift.associatedtype":{"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ScopeID"},{"kind":"text","text":" : "},{"text":"Hashable","kind":"typeIdentifier","preciseIdentifier":"s:SH"},{"text":" = ","kind":"text"},{"text":"DefaultScopeID","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms14DefaultScopeIDV"}],"role":"symbol","url":"\/documentation\/atoms\/scoped\/scopeid-swift.associatedtype","required":true,"abstract":[{"type":"text","text":"A type of the scope ID which is to find a matching scope."}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype","type":"topic","title":"ScopeID"},"doc://Atoms/s8SendableP":{"identifier":"doc:\/\/Atoms\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Atoms/documentation/Atoms/Scoped/scopeID-2kb9d":{"url":"\/documentation\/atoms\/scoped\/scopeid-2kb9d","abstract":[{"type":"text","text":"A scope ID which is to find a matching scope."}],"title":"scopeID","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"scopeID"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5Atoms6ScopedP7ScopeIDQa","text":"ScopeID"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d","type":"topic","required":true,"defaultImplementations":1,"kind":"symbol"},"doc://Atoms/documentation/Atoms/Scoped":{"role":"symbol","url":"\/documentation\/atoms\/scoped","kind":"symbol","title":"Scoped","abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"text":" ","type":"text"},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scoped"}],"navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped"},"doc://Atoms/documentation/Atoms":{"role":"collection","url":"\/documentation\/atoms","abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"title":"Atoms","type":"topic","kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms"}}}