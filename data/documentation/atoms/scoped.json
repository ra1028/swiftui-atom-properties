{"seeAlsoSections":[{"generated":true,"anchor":"Attributes","title":"Attributes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"]}],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scoped"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"typeIdentifier","text":"Atom","preciseIdentifier":"s:5Atoms4AtomP"}],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If multiple scopes are nested, you can define an arbitrary ","type":"text"},{"code":"scopeID","type":"codeVoice"},{"type":"text","text":" to ensure that"},{"text":" ","type":"text"},{"type":"text","text":"values are stored in a particular scope."},{"type":"text","text":" "},{"type":"text","text":"The atom with "},{"type":"codeVoice","code":"scopeID"},{"type":"text","text":" searches for the nearest "},{"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","isActive":true},{"type":"text","text":" with the matching ID in"},{"text":" ","type":"text"},{"type":"text","text":"ancestor views, and if not found, the state is shared within the app."}]},{"inlineContent":[{"type":"text","text":"Note that other atoms that depend on the scoped atom will be in a shared state and must be"},{"text":" ","type":"text"},{"type":"text","text":"given this attribute as well in order to scope them as well."}],"type":"paragraph"},{"type":"heading","anchor":"Example","text":"Example","level":2},{"code":["struct SearchScopeID: Hashable {}","","struct SearchQueryAtom: StateAtom, Scoped, Hashable {","    var scopeID: SearchScopeID {","        SearchScopeID()","    }","","    func defaultValue(context: Context) -> String {","         \"\"","    }","}","","AtomScope(id: SearchScopeID()) {","    SearchPane()","}"],"type":"codeListing","syntax":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"sections":[],"metadata":{"title":"Scoped","symbolKind":"protocol","modules":[{"name":"Atoms"}],"externalID":"s:5Atoms6ScopedP","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Scoped","kind":"identifier"}],"roleHeading":"Protocol","navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"role":"symbol"},"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype"],"anchor":"Associated-Types","generated":true,"title":"Associated Types"},{"generated":true,"title":"Instance Properties","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d"],"anchor":"Instance-Properties"}],"relationshipsSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"type":"inheritsFrom","kind":"relationships","title":"Inherits From"},{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"type":"conformingTypes","title":"Conforming Types","kind":"relationships"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/scoped"]}],"references":{"doc://Atoms/documentation/Atoms/Scoped":{"navigatorTitle":[{"kind":"identifier","text":"Scoped"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/atoms\/scoped","title":"Scoped","abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"text":" ","type":"text"},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}]},"doc://Atoms/documentation/Atoms":{"kind":"symbol","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms","url":"\/documentation\/atoms","type":"topic","role":"collection","title":"Atoms"},"doc://Atoms/documentation/Atoms/Resettable":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","role":"symbol","type":"topic","title":"Resettable","kind":"symbol","abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Resettable"}],"url":"\/documentation\/atoms\/resettable","navigatorTitle":[{"text":"Resettable","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/AtomScope":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","navigatorTitle":[{"text":"AtomScope","kind":"identifier"}],"type":"topic","url":"\/documentation\/atoms\/atomscope","abstract":[{"type":"text","text":"A view to override or monitor atoms in scope."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AtomScope"}],"role":"symbol","title":"AtomScope"},"doc://Atoms/documentation/Atoms/Refreshable":{"title":"Refreshable","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","url":"\/documentation\/atoms\/refreshable","role":"symbol","abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Refreshable"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"Refreshable","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Scoped/scopeID-2kb9d":{"url":"\/documentation\/atoms\/scoped\/scopeid-2kb9d","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d","defaultImplementations":1,"kind":"symbol","title":"scopeID","abstract":[{"type":"text","text":"A scope ID which is to find a matching scope."}],"role":"symbol","type":"topic","required":true,"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"scopeID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"ScopeID","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms6ScopedP7ScopeIDQa"}]},"doc://Atoms/documentation/Atoms/Atom":{"title":"Atom","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"navigatorTitle":[{"text":"Atom","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","url":"\/documentation\/atoms\/atom"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"title":"ModifiedAtom","type":"topic","navigatorTitle":[{"text":"ModifiedAtom","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","role":"symbol","abstract":[{"type":"text","text":"An atom type that applies a modifier to an atom."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ModifiedAtom","kind":"identifier"}],"url":"\/documentation\/atoms\/modifiedatom","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Node"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Scoped"},{"text":", ","type":"text"},{"code":"Modifier","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"AtomModifier","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Node.Produced"},{"text":" is ","type":"text"},{"code":"Modifier.Base","type":"codeVoice"},{"type":"text","text":"."}]},"kind":"symbol"},"doc://Atoms/documentation/Atoms/Scoped/ScopeID-swift.associatedtype":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype","type":"topic","url":"\/documentation\/atoms\/scoped\/scopeid-swift.associatedtype","abstract":[{"text":"A type of the scope ID which is to find a matching scope.","type":"text"}],"kind":"symbol","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"ScopeID","kind":"identifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SH","text":"Hashable"},{"kind":"text","text":" = "},{"preciseIdentifier":"s:5Atoms14DefaultScopeIDV","text":"DefaultScopeID","kind":"typeIdentifier"}],"role":"symbol","title":"ScopeID","required":true},"doc://Atoms/s8SendableP":{"identifier":"doc:\/\/Atoms\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Atoms/documentation/Atoms/KeepAlive":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","role":"symbol","type":"topic","title":"KeepAlive","kind":"symbol","abstract":[{"text":"An attribute protocol to allow the value of an atom to continue being retained","type":"text"},{"type":"text","text":" "},{"text":"even after they are no longer watched.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"KeepAlive","kind":"identifier"}],"url":"\/documentation\/atoms\/keepalive","navigatorTitle":[{"kind":"identifier","text":"KeepAlive"}]}}}