{"abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Scoped","kind":"identifier"}],"navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"roleHeading":"Protocol","modules":[{"name":"Atoms"}],"externalID":"s:5Atoms6ScopedP","title":"Scoped","symbolKind":"protocol"},"sections":[],"kind":"symbol","topicSections":[{"generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype"],"anchor":"Associated-Types","title":"Associated Types"},{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d"],"generated":true,"title":"Instance Properties","anchor":"Instance-Properties"}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"type":"inheritsFrom","kind":"relationships","title":"Inherits From"},{"title":"Conforming Types","type":"conformingTypes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"kind":"relationships"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/scoped"]}],"seeAlsoSections":[{"anchor":"Attributes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"],"title":"Attributes","generated":true}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Scoped","kind":"identifier"},{"kind":"text","text":" : "},{"text":"Atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","preciseIdentifier":"s:5Atoms4AtomP","kind":"typeIdentifier"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If multiple scopes are nested, you can define an arbitrary ","type":"text"},{"type":"codeVoice","code":"scopeID"},{"type":"text","text":" to ensure that"},{"text":" ","type":"text"},{"text":"values are stored in a particular scope.","type":"text"},{"type":"text","text":" "},{"text":"The atom with ","type":"text"},{"code":"scopeID","type":"codeVoice"},{"text":" searches for the nearest ","type":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","isActive":true,"type":"reference"},{"type":"text","text":" with the matching ID in"},{"text":" ","type":"text"},{"type":"text","text":"ancestor views, and if not found, the state is shared within the app."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that other atoms that depend on the scoped atom will be in a shared state and must be"},{"type":"text","text":" "},{"text":"given this attribute as well in order to scope them as well.","type":"text"}]},{"text":"Example","type":"heading","level":2,"anchor":"Example"},{"code":["struct SearchScopeID: Hashable {}","","struct SearchQueryAtom: StateAtom, Scoped, Hashable {","    var scopeID: SearchScopeID {","        SearchScopeID()","    }","","    func defaultValue(context: Context) -> String {","         \"\"","    }","}","","AtomScope(id: SearchScopeID()) {","    SearchPane()","}"],"type":"codeListing","syntax":"swift"}]}],"references":{"doc://Atoms/s8SendableP":{"identifier":"doc:\/\/Atoms\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Atoms/documentation/Atoms/Scoped/scopeID-2kb9d":{"url":"\/documentation\/atoms\/scoped\/scopeid-2kb9d","title":"scopeID","required":true,"role":"symbol","abstract":[{"type":"text","text":"A scope ID which is to find a matching scope."}],"defaultImplementations":1,"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"scopeID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"ScopeID","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms6ScopedP7ScopeIDQa"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d"},"doc://Atoms/documentation/Atoms/Scoped/ScopeID-swift.associatedtype":{"required":true,"url":"\/documentation\/atoms\/scoped\/scopeid-swift.associatedtype","kind":"symbol","abstract":[{"type":"text","text":"A type of the scope ID which is to find a matching scope."}],"title":"ScopeID","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ScopeID"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SH","text":"Hashable"},{"text":" = ","kind":"text"},{"preciseIdentifier":"s:5Atoms14DefaultScopeIDV","text":"DefaultScopeID","kind":"typeIdentifier"}],"role":"symbol"},"doc://Atoms/documentation/Atoms/Scoped":{"url":"\/documentation\/atoms\/scoped","title":"Scoped","role":"symbol","abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scoped"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Scoped"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped"},"doc://Atoms/documentation/Atoms/AtomScope":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","navigatorTitle":[{"text":"AtomScope","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"A view to override or monitor atoms in scope.","type":"text"}],"url":"\/documentation\/atoms\/atomscope","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomScope"}],"title":"AtomScope","role":"symbol"},"doc://Atoms/documentation/Atoms":{"type":"topic","url":"\/documentation\/atoms","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"title":"Atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ModifiedAtom","kind":"identifier"}],"role":"symbol","title":"ModifiedAtom","abstract":[{"type":"text","text":"An atom type that applies a modifier to an atom."}],"url":"\/documentation\/atoms\/modifiedatom","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Node","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Scoped","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Modifier","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"AtomModifier"},{"text":", and ","type":"text"},{"code":"Node.Produced","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Modifier.Base"},{"text":".","type":"text"}]},"navigatorTitle":[{"text":"ModifiedAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Refreshable":{"kind":"symbol","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Refreshable","kind":"identifier"}],"role":"symbol","title":"Refreshable","abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom refresh behavior."}],"url":"\/documentation\/atoms\/refreshable","navigatorTitle":[{"kind":"identifier","text":"Refreshable"}]},"doc://Atoms/documentation/Atoms/Atom":{"type":"topic","url":"\/documentation\/atoms\/atom","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Atom"}],"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"navigatorTitle":[{"kind":"identifier","text":"Atom"}],"title":"Atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom"},"doc://Atoms/documentation/Atoms/Resettable":{"role":"symbol","navigatorTitle":[{"text":"Resettable","kind":"identifier"}],"url":"\/documentation\/atoms\/resettable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resettable","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","type":"topic","abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom reset behavior."}],"title":"Resettable"},"doc://Atoms/documentation/Atoms/KeepAlive":{"role":"symbol","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"url":"\/documentation\/atoms\/keepalive","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"KeepAlive","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","type":"topic","abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"text":" ","type":"text"},{"type":"text","text":"even after they are no longer watched."}],"title":"KeepAlive"}}}