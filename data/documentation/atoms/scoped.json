{"topicSections":[{"generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype"],"title":"Associated Types","anchor":"Associated-Types"},{"anchor":"Instance-Properties","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d"],"generated":true,"title":"Instance Properties"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Atom","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom"}]}],"kind":"declarations"},{"content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If multiple scopes are nested, you can define an arbitrary "},{"code":"scopeID","type":"codeVoice"},{"type":"text","text":" to ensure that"},{"type":"text","text":" "},{"type":"text","text":"values are stored in a particular scope."},{"text":" ","type":"text"},{"type":"text","text":"The atom with "},{"code":"scopeID","type":"codeVoice"},{"type":"text","text":" searches for the nearest "},{"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","isActive":true},{"text":" with the matching ID in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ancestor views, and if not found, the state is shared within the app."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that other atoms that depend on the scoped atom will be in a shared state and must be"},{"type":"text","text":" "},{"text":"given this attribute as well in order to scope them as well.","type":"text"}]},{"type":"heading","text":"Example","level":2,"anchor":"Example"},{"code":["struct SearchScopeID: Hashable {}","","struct SearchQueryAtom: StateAtom, Scoped, Hashable {","    var scopeID: SearchScopeID {","        SearchScopeID()","    }","","    func defaultValue(context: Context) -> String {","         \"\"","    }","}","","AtomScope(id: SearchScopeID()) {","    SearchPane()","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"],"title":"Attributes","anchor":"Attributes"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"relationshipsSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"kind":"relationships","type":"inheritsFrom","title":"Inherits From"},{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"title":"Conforming Types","kind":"relationships","type":"conformingTypes"}],"metadata":{"externalID":"s:5Atoms6ScopedP","title":"Scoped","role":"symbol","modules":[{"name":"Atoms"}],"navigatorTitle":[{"kind":"identifier","text":"Scoped"}],"symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scoped"}],"roleHeading":"Protocol"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"text":" ","type":"text"},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/scoped"]}],"references":{"doc://Atoms/documentation/Atoms/KeepAlive":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeepAlive"}],"title":"KeepAlive","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","type":"topic","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"abstract":[{"text":"An attribute protocol to allow the value of an atom to continue being retained","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even after they are no longer watched."}],"url":"\/documentation\/atoms\/keepalive","kind":"symbol"},"doc://Atoms/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Atoms\/s8SendableP"},"doc://Atoms/documentation/Atoms/Refreshable":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Refreshable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Refreshable"}],"abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom refresh behavior."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","title":"Refreshable","url":"\/documentation\/atoms\/refreshable"},"doc://Atoms/documentation/Atoms/Scoped":{"url":"\/documentation\/atoms\/scoped","abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"}],"title":"Scoped","role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Scoped"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped"},"doc://Atoms/documentation/Atoms":{"abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"title":"Atoms","type":"topic","url":"\/documentation\/atoms","role":"collection","identifier":"doc:\/\/Atoms\/documentation\/Atoms","kind":"symbol"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"title":"ModifiedAtom","role":"symbol","navigatorTitle":[{"text":"ModifiedAtom","kind":"identifier"}],"abstract":[{"text":"An atom type that applies a modifier to an atom.","type":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/atoms\/modifiedatom","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ModifiedAtom"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Node","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Scoped"},{"type":"text","text":", "},{"type":"codeVoice","code":"Modifier"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomModifier"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Node.Produced"},{"type":"text","text":" is "},{"code":"Modifier.Base","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"},"doc://Atoms/documentation/Atoms/Scoped/scopeID-2kb9d":{"abstract":[{"type":"text","text":"A scope ID which is to find a matching scope."}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"scopeID"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"ScopeID","preciseIdentifier":"s:5Atoms6ScopedP7ScopeIDQa"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d","role":"symbol","defaultImplementations":1,"required":true,"kind":"symbol","url":"\/documentation\/atoms\/scoped\/scopeid-2kb9d","title":"scopeID"},"doc://Atoms/documentation/Atoms/Resettable":{"kind":"symbol","url":"\/documentation\/atoms\/resettable","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","role":"symbol","title":"Resettable","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Resettable","kind":"identifier"}],"abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}],"navigatorTitle":[{"text":"Resettable","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Atom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"role":"symbol","type":"topic","title":"Atom","url":"\/documentation\/atoms\/atom","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"navigatorTitle":[{"text":"Atom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/AtomScope":{"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AtomScope"}],"title":"AtomScope","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomScope"}],"kind":"symbol","abstract":[{"type":"text","text":"A view to override or monitor atoms in scope."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","url":"\/documentation\/atoms\/atomscope"},"doc://Atoms/documentation/Atoms/Scoped/ScopeID-swift.associatedtype":{"required":true,"title":"ScopeID","role":"symbol","abstract":[{"type":"text","text":"A type of the scope ID which is to find a matching scope."}],"type":"topic","kind":"symbol","url":"\/documentation\/atoms\/scoped\/scopeid-swift.associatedtype","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ScopeID","kind":"identifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SH","text":"Hashable"},{"kind":"text","text":" = "},{"kind":"typeIdentifier","preciseIdentifier":"s:5Atoms14DefaultScopeIDV","text":"DefaultScopeID"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype"}}}