{"metadata":{"roleHeading":"Protocol","symbolKind":"protocol","role":"symbol","title":"Scoped","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scoped"}],"navigatorTitle":[{"kind":"identifier","text":"Scoped"}],"externalID":"s:5Atoms6ScopedP","modules":[{"name":"Atoms"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","relationshipsSections":[{"type":"inheritsFrom","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"title":"Inherits From","kind":"relationships"},{"kind":"relationships","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"type":"conformingTypes","title":"Conforming Types"}],"sections":[],"abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"type":"text","text":" "},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype"],"anchor":"Associated-Types","generated":true},{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d"],"anchor":"Instance-Properties","title":"Instance Properties","generated":true}],"seeAlsoSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"],"anchor":"Attributes","generated":true,"title":"Attributes"}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"variants":[{"paths":["\/documentation\/atoms\/scoped"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scoped"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:5Atoms4AtomP","kind":"typeIdentifier","text":"Atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If multiple scopes are nested, you can define an arbitrary "},{"code":"scopeID","type":"codeVoice"},{"text":" to ensure that","type":"text"},{"text":" ","type":"text"},{"text":"values are stored in a particular scope.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The atom with "},{"type":"codeVoice","code":"scopeID"},{"type":"text","text":" searches for the nearest "},{"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","isActive":true},{"text":" with the matching ID in","type":"text"},{"type":"text","text":" "},{"text":"ancestor views, and if not found, the state is shared within the app.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Note that other atoms that depend on the scoped atom will be in a shared state and must be"},{"type":"text","text":" "},{"type":"text","text":"given this attribute as well in order to scope them as well."}],"type":"paragraph"},{"text":"Example","type":"heading","level":2,"anchor":"Example"},{"type":"codeListing","syntax":"swift","code":["struct SearchScopeID: Hashable {}","","struct SearchQueryAtom: StateAtom, Scoped, Hashable {","    var scopeID: SearchScopeID {","        SearchScopeID()","    }","","    func defaultValue(context: Context) -> String {","         \"\"","    }","}","","AtomScope(id: SearchScopeID()) {","    SearchPane()","}"]}],"kind":"content"}],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","interfaceLanguage":"swift"},"references":{"doc://Atoms/documentation/Atoms/AtomScope":{"navigatorTitle":[{"kind":"identifier","text":"AtomScope"}],"title":"AtomScope","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AtomScope","kind":"identifier"}],"abstract":[{"text":"A view to override or monitor atoms in scope.","type":"text"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","type":"topic","kind":"symbol","url":"\/documentation\/atoms\/atomscope","role":"symbol"},"doc://Atoms/documentation/Atoms/Scoped":{"role":"symbol","url":"\/documentation\/atoms\/scoped","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Scoped","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","title":"Scoped","type":"topic","abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"navigatorTitle":[{"text":"Scoped","kind":"identifier"}]},"doc://Atoms/documentation/Atoms":{"url":"\/documentation\/atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"type":"topic","kind":"symbol","title":"Atoms","role":"collection"},"doc://Atoms/documentation/Atoms/Resettable":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resettable","kind":"identifier"}],"title":"Resettable","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","url":"\/documentation\/atoms\/resettable","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Resettable"}],"abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}]},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"url":"\/documentation\/atoms\/modifiedatom","abstract":[{"type":"text","text":"An atom type that applies a modifier to an atom."}],"type":"topic","title":"ModifiedAtom","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ModifiedAtom"}],"navigatorTitle":[{"kind":"identifier","text":"ModifiedAtom"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Node"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Scoped"},{"text":", ","type":"text"},{"code":"Modifier","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"AtomModifier","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Node.Produced"},{"type":"text","text":" is "},{"code":"Modifier.Base","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol"},"doc://Atoms/documentation/Atoms/Refreshable":{"title":"Refreshable","url":"\/documentation\/atoms\/refreshable","role":"symbol","type":"topic","navigatorTitle":[{"text":"Refreshable","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Refreshable","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable"},"doc://Atoms/documentation/Atoms/Scoped/scopeID-2kb9d":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"scopeID","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:5Atoms6ScopedP7ScopeIDQa","text":"ScopeID","kind":"typeIdentifier"}],"kind":"symbol","required":true,"type":"topic","defaultImplementations":1,"title":"scopeID","abstract":[{"type":"text","text":"A scope ID which is to find a matching scope."}],"url":"\/documentation\/atoms\/scoped\/scopeid-2kb9d"},"doc://Atoms/documentation/Atoms/Scoped/ScopeID-swift.associatedtype":{"title":"ScopeID","kind":"symbol","url":"\/documentation\/atoms\/scoped\/scopeid-swift.associatedtype","type":"topic","required":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype","role":"symbol","abstract":[{"type":"text","text":"A type of the scope ID which is to find a matching scope."}],"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ScopeID","kind":"identifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SH","text":"Hashable"},{"text":" = ","kind":"text"},{"text":"DefaultScopeID","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms14DefaultScopeIDV"}]},"doc://Atoms/documentation/Atoms/Atom":{"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"role":"symbol","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","navigatorTitle":[{"text":"Atom","kind":"identifier"}],"url":"\/documentation\/atoms\/atom","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Atom","kind":"identifier"}],"title":"Atom","kind":"symbol"},"doc://Atoms/documentation/Atoms/KeepAlive":{"url":"\/documentation\/atoms\/keepalive","abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"text":" ","type":"text"},{"type":"text","text":"even after they are no longer watched."}],"type":"topic","title":"KeepAlive","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"KeepAlive"}],"navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"kind":"symbol"},"doc://Atoms/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Atoms\/s8SendableP","title":"Swift.Sendable"}}}