{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped"},"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"Scoped"}],"title":"Scoped","symbolKind":"protocol","modules":[{"name":"Atoms"}],"roleHeading":"Protocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Scoped","kind":"identifier"}],"role":"symbol","externalID":"s:5Atoms6ScopedP"},"relationshipsSections":[{"type":"inheritsFrom","kind":"relationships","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"title":"Inherits From"},{"kind":"relationships","title":"Conforming Types","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"type":"conformingTypes"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"},{"kind":"text","text":" : "},{"text":"Atom","preciseIdentifier":"s:5Atoms4AtomP","kind":"typeIdentifier","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If multiple scopes are nested, you can define an arbitrary ","type":"text"},{"type":"codeVoice","code":"scopeID"},{"type":"text","text":" to ensure that"},{"type":"text","text":" "},{"type":"text","text":"values are stored in a particular scope."},{"type":"text","text":" "},{"text":"The atom with ","type":"text"},{"code":"scopeID","type":"codeVoice"},{"type":"text","text":" searches for the nearest "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","isActive":true,"type":"reference"},{"type":"text","text":" with the matching ID in"},{"type":"text","text":" "},{"type":"text","text":"ancestor views, and if not found, the state is shared within the app."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that other atoms that depend on the scoped atom will be in a shared state and must be"},{"type":"text","text":" "},{"text":"given this attribute as well in order to scope them as well.","type":"text"}]},{"anchor":"Example","type":"heading","text":"Example","level":2},{"code":["struct SearchScopeID: Hashable {}","","struct SearchQueryAtom: StateAtom, Scoped, Hashable {","    var scopeID: SearchScopeID {","        SearchScopeID()","    }","","    func defaultValue(context: Context) -> String {","         \"\"","    }","}","","AtomScope(id: SearchScopeID()) {","    SearchPane()","}"],"type":"codeListing","syntax":"swift"}]}],"seeAlsoSections":[{"generated":true,"anchor":"Attributes","title":"Attributes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"]}],"topicSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype"],"anchor":"Associated-Types","title":"Associated Types","generated":true},{"generated":true,"title":"Instance Properties","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d"],"anchor":"Instance-Properties"}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"type":"text","text":" "},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/scoped"]}],"references":{"doc://Atoms/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Atoms\/s8SendableP","title":"Swift.Sendable"},"doc://Atoms/documentation/Atoms/AtomScope":{"role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AtomScope","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AtomScope"}],"abstract":[{"type":"text","text":"A view to override or monitor atoms in scope."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","kind":"symbol","title":"AtomScope","url":"\/documentation\/atoms\/atomscope"},"doc://Atoms/documentation/Atoms/Atom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"symbol","abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Atom"}],"url":"\/documentation\/atoms\/atom","title":"Atom","role":"symbol","type":"topic"},"doc://Atoms/documentation/Atoms":{"title":"Atoms","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"url":"\/documentation\/atoms","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms","role":"collection","kind":"symbol"},"doc://Atoms/documentation/Atoms/Scoped":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"text":" ","type":"text"},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"url":"\/documentation\/atoms\/scoped","type":"topic","title":"Scoped","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped"},"doc://Atoms/documentation/Atoms/Resettable":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Resettable"}],"abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}],"url":"\/documentation\/atoms\/resettable","type":"topic","title":"Resettable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Resettable","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable"},"doc://Atoms/documentation/Atoms/Refreshable":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Refreshable"}],"abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"url":"\/documentation\/atoms\/refreshable","type":"topic","title":"Refreshable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Refreshable","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable"},"doc://Atoms/documentation/Atoms/Scoped/scopeID-2kb9d":{"required":true,"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"scopeID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:5Atoms6ScopedP7ScopeIDQa","text":"ScopeID","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d","title":"scopeID","kind":"symbol","abstract":[{"type":"text","text":"A scope ID which is to find a matching scope."}],"url":"\/documentation\/atoms\/scoped\/scopeid-2kb9d","defaultImplementations":1},"doc://Atoms/documentation/Atoms/Scoped/ScopeID-swift.associatedtype":{"type":"topic","abstract":[{"type":"text","text":"A type of the scope ID which is to find a matching scope."}],"url":"\/documentation\/atoms\/scoped\/scopeid-swift.associatedtype","required":true,"kind":"symbol","role":"symbol","title":"ScopeID","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ScopeID"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SH","kind":"typeIdentifier","text":"Hashable"},{"text":" = ","kind":"text"},{"text":"DefaultScopeID","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms14DefaultScopeIDV"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype"},"doc://Atoms/documentation/Atoms/KeepAlive":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","type":"topic","url":"\/documentation\/atoms\/keepalive","title":"KeepAlive","kind":"symbol","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"role":"symbol","abstract":[{"text":"An attribute protocol to allow the value of an atom to continue being retained","type":"text"},{"text":" ","type":"text"},{"text":"even after they are no longer watched.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"KeepAlive"}]},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"url":"\/documentation\/atoms\/modifiedatom","role":"symbol","abstract":[{"type":"text","text":"An atom type that applies a modifier to an atom."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ModifiedAtom","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ModifiedAtom"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Node"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Scoped"},{"text":", ","type":"text"},{"code":"Modifier","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomModifier"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Node.Produced"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Modifier.Base"},{"text":".","type":"text"}]},"kind":"symbol","title":"ModifiedAtom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","type":"topic"}}}