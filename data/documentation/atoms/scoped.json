{"topicSections":[{"title":"Associated Types","anchor":"Associated-Types","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype"],"generated":true},{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d"],"title":"Instance Properties","anchor":"Instance-Properties","generated":true}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"relationshipsSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"kind":"relationships","type":"inheritsFrom","title":"Inherits From"},{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"type":"conformingTypes","title":"Conforming Types","kind":"relationships"}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Scoped","kind":"identifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","text":"Atom"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"text","text":"If multiple scopes are nested, you can define an arbitrary "},{"type":"codeVoice","code":"scopeID"},{"type":"text","text":" to ensure that"},{"type":"text","text":" "},{"type":"text","text":"values are stored in a particular scope."},{"type":"text","text":" "},{"type":"text","text":"The atom with "},{"type":"codeVoice","code":"scopeID"},{"type":"text","text":" searches for the nearest "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","isActive":true,"type":"reference"},{"text":" with the matching ID in","type":"text"},{"text":" ","type":"text"},{"text":"ancestor views, and if not found, the state is shared within the app.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Note that other atoms that depend on the scoped atom will be in a shared state and must be","type":"text"},{"type":"text","text":" "},{"text":"given this attribute as well in order to scope them as well.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Example","type":"heading","text":"Example"},{"type":"codeListing","code":["struct SearchScopeID: Hashable {}","","struct SearchQueryAtom: StateAtom, Scoped, Hashable {","    var scopeID: SearchScopeID {","        SearchScopeID()","    }","","    func defaultValue(context: Context) -> String {","         \"\"","    }","}","","AtomScope(id: SearchScopeID()) {","    SearchPane()","}"],"syntax":"swift"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/scoped"]}],"metadata":{"externalID":"s:5Atoms6ScopedP","modules":[{"name":"Atoms"}],"title":"Scoped","roleHeading":"Protocol","role":"symbol","navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scoped"}]},"sections":[],"seeAlsoSections":[{"anchor":"Attributes","title":"Attributes","generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive"]}],"kind":"symbol","abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"references":{"doc://Atoms/documentation/Atoms/Scoped/scopeID-2kb9d":{"required":true,"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"scopeID"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ScopeID","preciseIdentifier":"s:5Atoms6ScopedP7ScopeIDQa"}],"title":"scopeID","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d","abstract":[{"type":"text","text":"A scope ID which is to find a matching scope."}],"defaultImplementations":1,"type":"topic","role":"symbol","url":"\/documentation\/atoms\/scoped\/scopeid-2kb9d","kind":"symbol"},"doc://Atoms/documentation/Atoms/Scoped":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Scoped","kind":"identifier"}],"title":"Scoped","url":"\/documentation\/atoms\/scoped","navigatorTitle":[{"kind":"identifier","text":"Scoped"}],"abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"text":" ","type":"text"},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","kind":"symbol","type":"topic","role":"symbol"},"doc://Atoms/documentation/Atoms/Atom":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"symbol","url":"\/documentation\/atoms\/atom","abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Atom"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"title":"Atom"},"doc://Atoms/documentation/Atoms":{"type":"topic","url":"\/documentation\/atoms","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms","title":"Atoms"},"doc://Atoms/documentation/Atoms/AtomScope":{"abstract":[{"type":"text","text":"A view to override or monitor atoms in scope."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AtomScope","kind":"identifier"}],"title":"AtomScope","url":"\/documentation\/atoms\/atomscope","navigatorTitle":[{"text":"AtomScope","kind":"identifier"}],"role":"symbol"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"abstract":[{"type":"text","text":"An atom type that applies a modifier to an atom."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","kind":"symbol","url":"\/documentation\/atoms\/modifiedatom","title":"ModifiedAtom","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ModifiedAtom"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ModifiedAtom","kind":"identifier"}],"type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Node","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Scoped"},{"type":"text","text":", "},{"type":"codeVoice","code":"Modifier"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"AtomModifier"},{"type":"text","text":", and "},{"code":"Node.Produced","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Modifier.Base","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://Atoms/s8SendableP":{"identifier":"doc:\/\/Atoms\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Atoms/documentation/Atoms/Scoped/ScopeID-swift.associatedtype":{"required":true,"fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ScopeID"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"Hashable","preciseIdentifier":"s:SH"},{"text":" = ","kind":"text"},{"preciseIdentifier":"s:5Atoms14DefaultScopeIDV","kind":"typeIdentifier","text":"DefaultScopeID"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype","url":"\/documentation\/atoms\/scoped\/scopeid-swift.associatedtype","title":"ScopeID","type":"topic","role":"symbol","abstract":[{"text":"A type of the scope ID which is to find a matching scope.","type":"text"}],"kind":"symbol"},"doc://Atoms/documentation/Atoms/KeepAlive":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"KeepAlive","kind":"identifier"}],"title":"KeepAlive","url":"\/documentation\/atoms\/keepalive","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"abstract":[{"text":"An attribute protocol to allow the value of an atom to continue being retained","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even after they are no longer watched."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","kind":"symbol","type":"topic","role":"symbol"}}}