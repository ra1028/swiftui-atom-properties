{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","text":"Atom","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"If multiple scopes are nested, you can define an arbitrary "},{"code":"scopeID","type":"codeVoice"},{"text":" to ensure that","type":"text"},{"type":"text","text":" "},{"text":"values are stored in a particular scope.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The atom with "},{"type":"codeVoice","code":"scopeID"},{"type":"text","text":" searches for the nearest "},{"isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","type":"reference"},{"type":"text","text":" with the matching ID in"},{"type":"text","text":" "},{"text":"ancestor views, and if not found, the state is shared within the app.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Note that other atoms that depend on the scoped atom will be in a shared state and must be","type":"text"},{"text":" ","type":"text"},{"text":"given this attribute as well in order to scope them as well.","type":"text"}],"type":"paragraph"},{"text":"Example","level":2,"type":"heading","anchor":"Example"},{"type":"codeListing","syntax":"swift","code":["struct SearchScopeID: Hashable {}","","struct SearchQueryAtom: StateAtom, Scoped, Hashable {","    var scopeID: SearchScopeID {","        SearchScopeID()","    }","","    func defaultValue(context: Context) -> String {","         \"\"","    }","}","","AtomScope(id: SearchScopeID()) {","    SearchPane()","}"]}]}],"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"metadata":{"modules":[{"name":"Atoms"}],"symbolKind":"protocol","roleHeading":"Protocol","externalID":"s:5Atoms6ScopedP","title":"Scoped","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scoped"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Scoped"}]},"topicSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype"],"anchor":"Associated-Types","generated":true,"title":"Associated Types"},{"generated":true,"title":"Instance Properties","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d"],"anchor":"Instance-Properties"}],"seeAlsoSections":[{"title":"Attributes","anchor":"Attributes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"],"generated":true}],"variants":[{"paths":["\/documentation\/atoms\/scoped"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"relationshipsSections":[{"kind":"relationships","title":"Inherits From","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"type":"inheritsFrom"},{"title":"Conforming Types","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"kind":"relationships","type":"conformingTypes"}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"references":{"doc://Atoms/documentation/Atoms/AtomScope":{"abstract":[{"type":"text","text":"A view to override or monitor atoms in scope."}],"role":"symbol","navigatorTitle":[{"text":"AtomScope","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomScope"}],"kind":"symbol","title":"AtomScope","url":"\/documentation\/atoms\/atomscope","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","type":"topic"},"doc://Atoms/documentation/Atoms/Atom":{"url":"\/documentation\/atoms\/atom","abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"role":"symbol","title":"Atom","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Atom"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom"},"doc://Atoms/documentation/Atoms/Scoped/scopeID-2kb9d":{"kind":"symbol","type":"topic","title":"scopeID","role":"symbol","abstract":[{"text":"A scope ID which is to find a matching scope.","type":"text"}],"defaultImplementations":1,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"scopeID","kind":"identifier"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:5Atoms6ScopedP7ScopeIDQa","text":"ScopeID","kind":"typeIdentifier"}],"required":true,"url":"\/documentation\/atoms\/scoped\/scopeid-2kb9d"},"doc://Atoms/documentation/Atoms":{"title":"Atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","kind":"symbol","role":"collection","url":"\/documentation\/atoms","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"type":"topic"},"doc://Atoms/documentation/Atoms/Scoped/ScopeID-swift.associatedtype":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype","kind":"symbol","required":true,"url":"\/documentation\/atoms\/scoped\/scopeid-swift.associatedtype","type":"topic","abstract":[{"type":"text","text":"A type of the scope ID which is to find a matching scope."}],"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"text":"ScopeID","kind":"identifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SH","text":"Hashable","kind":"typeIdentifier"},{"text":" = ","kind":"text"},{"preciseIdentifier":"s:5Atoms14DefaultScopeIDV","kind":"typeIdentifier","text":"DefaultScopeID"}],"title":"ScopeID","role":"symbol"},"doc://Atoms/documentation/Atoms/Refreshable":{"abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Refreshable"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","type":"topic","navigatorTitle":[{"text":"Refreshable","kind":"identifier"}],"title":"Refreshable","url":"\/documentation\/atoms\/refreshable","role":"symbol"},"doc://Atoms/documentation/Atoms/Resettable":{"title":"Resettable","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","abstract":[{"text":"An attribute protocol that allows an atom to have a custom reset behavior.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"Resettable","kind":"identifier"}],"url":"\/documentation\/atoms\/resettable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Resettable"}],"kind":"symbol"},"doc://Atoms/documentation/Atoms/Scoped":{"abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"text":"of where it is used and prevents it from being shared out of scope.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scoped"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","type":"topic","navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"title":"Scoped","url":"\/documentation\/atoms\/scoped","role":"symbol"},"doc://Atoms/documentation/Atoms/KeepAlive":{"abstract":[{"text":"An attribute protocol to allow the value of an atom to continue being retained","type":"text"},{"type":"text","text":" "},{"text":"even after they are no longer watched.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"KeepAlive","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","type":"topic","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}],"title":"KeepAlive","url":"\/documentation\/atoms\/keepalive","role":"symbol"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Node"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Scoped"},{"type":"text","text":", "},{"type":"codeVoice","code":"Modifier"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomModifier"},{"text":", and ","type":"text"},{"code":"Node.Produced","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Modifier.Base"},{"type":"text","text":"."}]},"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ModifiedAtom"}],"title":"ModifiedAtom","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ModifiedAtom"}],"kind":"symbol","abstract":[{"text":"An atom type that applies a modifier to an atom.","type":"text"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","url":"\/documentation\/atoms\/modifiedatom"},"doc://Atoms/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Atoms\/s8SendableP"}}}