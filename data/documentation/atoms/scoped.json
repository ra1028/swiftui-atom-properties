{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","text":"Atom","preciseIdentifier":"s:5Atoms4AtomP","kind":"typeIdentifier"}]}]},{"content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"If multiple scopes are nested, you can define an arbitrary "},{"type":"codeVoice","code":"scopeID"},{"text":" to ensure that","type":"text"},{"type":"text","text":" "},{"text":"values are stored in a particular scope.","type":"text"},{"text":" ","type":"text"},{"text":"The atom with ","type":"text"},{"type":"codeVoice","code":"scopeID"},{"text":" searches for the nearest ","type":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","type":"reference","isActive":true},{"text":" with the matching ID in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ancestor views, and if not found, the state is shared within the app."}],"type":"paragraph"},{"inlineContent":[{"text":"Note that other atoms that depend on the scoped atom will be in a shared state and must be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given this attribute as well in order to scope them as well."}],"type":"paragraph"},{"text":"Example","anchor":"Example","level":2,"type":"heading"},{"syntax":"swift","type":"codeListing","code":["struct SearchScopeID: Hashable {}","","struct SearchQueryAtom: StateAtom, Scoped, Hashable {","    var scopeID: SearchScopeID {","        SearchScopeID()","    }","","    func defaultValue(context: Context) -> String {","         \"\"","    }","}","","AtomScope(id: SearchScopeID()) {","    SearchPane()","}"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/scoped"]}],"seeAlsoSections":[{"anchor":"Attributes","title":"Attributes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive"],"generated":true}],"relationshipsSections":[{"type":"inheritsFrom","kind":"relationships","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"title":"Inherits From"},{"title":"Conforming Types","type":"conformingTypes","kind":"relationships","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"]}],"metadata":{"role":"symbol","roleHeading":"Protocol","navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scoped"}],"symbolKind":"protocol","modules":[{"name":"Atoms"}],"title":"Scoped","externalID":"s:5Atoms6ScopedP"},"abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"topicSections":[{"anchor":"Associated-Types","generated":true,"title":"Associated Types","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype"]},{"generated":true,"title":"Instance Properties","anchor":"Instance-Properties","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d"]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped"},"references":{"doc://Atoms/documentation/Atoms/ModifiedAtom":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Node","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Scoped"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Modifier"},{"type":"text","text":" conforms to "},{"code":"AtomModifier","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Node.Produced"},{"type":"text","text":" is "},{"code":"Modifier.Base","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ModifiedAtom"}],"abstract":[{"type":"text","text":"An atom type that applies a modifier to an atom."}],"role":"symbol","kind":"symbol","url":"\/documentation\/atoms\/modifiedatom","title":"ModifiedAtom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","navigatorTitle":[{"kind":"identifier","text":"ModifiedAtom"}]},"doc://Atoms/documentation/Atoms/Atom":{"title":"Atom","url":"\/documentation\/atoms\/atom","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Atom","kind":"identifier"}],"navigatorTitle":[{"text":"Atom","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","abstract":[{"text":"Declares that a type can produce a value that can be accessed from everywhere.","type":"text"}]},"doc://Atoms/documentation/Atoms/Scoped":{"abstract":[{"text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"}],"url":"\/documentation\/atoms\/scoped","role":"symbol","title":"Scoped","kind":"symbol","type":"topic"},"doc://Atoms/documentation/Atoms/AtomScope":{"url":"\/documentation\/atoms\/atomscope","type":"topic","navigatorTitle":[{"text":"AtomScope","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","abstract":[{"text":"A view to override or monitor atoms in scope.","type":"text"}],"title":"AtomScope","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AtomScope","kind":"identifier"}],"kind":"symbol","role":"symbol"},"doc://Atoms/documentation/Atoms/Scoped/scopeID-2kb9d":{"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"scopeID","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:5Atoms6ScopedP7ScopeIDQa","text":"ScopeID","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"A scope ID which is to find a matching scope."}],"title":"scopeID","required":true,"defaultImplementations":1,"url":"\/documentation\/atoms\/scoped\/scopeid-2kb9d"},"doc://Atoms/documentation/Atoms/KeepAlive":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"KeepAlive","kind":"identifier"}],"title":"KeepAlive","abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"type":"text","text":" "},{"type":"text","text":"even after they are no longer watched."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","type":"topic","url":"\/documentation\/atoms\/keepalive","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"KeepAlive","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Scoped/ScopeID-swift.associatedtype":{"title":"ScopeID","kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ScopeID"},{"text":" : ","kind":"text"},{"text":"Hashable","kind":"typeIdentifier","preciseIdentifier":"s:SH"},{"text":" = ","kind":"text"},{"kind":"typeIdentifier","text":"DefaultScopeID","preciseIdentifier":"s:5Atoms14DefaultScopeIDV"}],"role":"symbol","type":"topic","required":true,"abstract":[{"type":"text","text":"A type of the scope ID which is to find a matching scope."}],"url":"\/documentation\/atoms\/scoped\/scopeid-swift.associatedtype"},"doc://Atoms/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Atoms\/s8SendableP"},"doc://Atoms/documentation/Atoms":{"role":"collection","type":"topic","abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"kind":"symbol","title":"Atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","url":"\/documentation\/atoms"}}}