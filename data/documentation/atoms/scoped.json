{"kind":"symbol","abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"text":" ","type":"text"},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"seeAlsoSections":[{"generated":true,"anchor":"Attributes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"],"title":"Attributes"}],"relationshipsSections":[{"kind":"relationships","title":"Inherits From","type":"inheritsFrom","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"]},{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"type":"conformingTypes","kind":"relationships","title":"Conforming Types"}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"sections":[],"topicSections":[{"title":"Associated Types","anchor":"Associated-Types","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype"],"generated":true},{"anchor":"Instance-Properties","generated":true,"title":"Instance Properties","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d"]}],"metadata":{"navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"roleHeading":"Protocol","title":"Scoped","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Scoped","kind":"identifier"}],"role":"symbol","modules":[{"name":"Atoms"}],"externalID":"s:5Atoms6ScopedP","symbolKind":"protocol"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/scoped"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scoped","kind":"identifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP","text":"Atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If multiple scopes are nested, you can define an arbitrary ","type":"text"},{"type":"codeVoice","code":"scopeID"},{"type":"text","text":" to ensure that"},{"type":"text","text":" "},{"text":"values are stored in a particular scope.","type":"text"},{"type":"text","text":" "},{"text":"The atom with ","type":"text"},{"code":"scopeID","type":"codeVoice"},{"text":" searches for the nearest ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","type":"reference"},{"text":" with the matching ID in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ancestor views, and if not found, the state is shared within the app."}]},{"inlineContent":[{"text":"Note that other atoms that depend on the scoped atom will be in a shared state and must be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"given this attribute as well in order to scope them as well."}],"type":"paragraph"},{"type":"heading","anchor":"Example","text":"Example","level":2},{"type":"codeListing","syntax":"swift","code":["struct SearchScopeID: Hashable {}","","struct SearchQueryAtom: StateAtom, Scoped, Hashable {","    var scopeID: SearchScopeID {","        SearchScopeID()","    }","","    func defaultValue(context: Context) -> String {","         \"\"","    }","}","","AtomScope(id: SearchScopeID()) {","    SearchPane()","}"]}]}],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","interfaceLanguage":"swift"},"references":{"doc://Atoms/documentation/Atoms/Scoped/ScopeID-swift.associatedtype":{"type":"topic","required":true,"role":"symbol","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"ScopeID","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Hashable","preciseIdentifier":"s:SH","kind":"typeIdentifier"},{"text":" = ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5Atoms14DefaultScopeIDV","text":"DefaultScopeID"}],"kind":"symbol","title":"ScopeID","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype","abstract":[{"type":"text","text":"A type of the scope ID which is to find a matching scope."}],"url":"\/documentation\/atoms\/scoped\/scopeid-swift.associatedtype"},"doc://Atoms/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Atoms\/s8SendableP","title":"Swift.Sendable"},"doc://Atoms/documentation/Atoms/Resettable":{"title":"Resettable","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Resettable"}],"role":"symbol","url":"\/documentation\/atoms\/resettable","kind":"symbol","abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom reset behavior."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Resettable","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Refreshable":{"type":"topic","title":"Refreshable","url":"\/documentation\/atoms\/refreshable","kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","abstract":[{"text":"An attribute protocol that allows an atom to have a custom refresh behavior.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Refreshable"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Refreshable","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Scoped/scopeID-2kb9d":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"scopeID","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:5Atoms6ScopedP7ScopeIDQa","kind":"typeIdentifier","text":"ScopeID"}],"type":"topic","kind":"symbol","defaultImplementations":1,"title":"scopeID","abstract":[{"type":"text","text":"A scope ID which is to find a matching scope."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d","required":true,"url":"\/documentation\/atoms\/scoped\/scopeid-2kb9d","role":"symbol"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"navigatorTitle":[{"kind":"identifier","text":"ModifiedAtom"}],"url":"\/documentation\/atoms\/modifiedatom","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Node"},{"type":"text","text":" conforms to "},{"code":"Scoped","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Modifier"},{"text":" conforms to ","type":"text"},{"code":"AtomModifier","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Node.Produced","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Modifier.Base","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","abstract":[{"type":"text","text":"An atom type that applies a modifier to an atom."}],"title":"ModifiedAtom","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ModifiedAtom","kind":"identifier"}],"kind":"symbol"},"doc://Atoms/documentation/Atoms/AtomScope":{"abstract":[{"type":"text","text":"A view to override or monitor atoms in scope."}],"role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","title":"AtomScope","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AtomScope"}],"navigatorTitle":[{"text":"AtomScope","kind":"identifier"}],"url":"\/documentation\/atoms\/atomscope","type":"topic","kind":"symbol"},"doc://Atoms/documentation/Atoms":{"abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"kind":"symbol","url":"\/documentation\/atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","role":"collection","type":"topic","title":"Atoms"},"doc://Atoms/documentation/Atoms/Scoped":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Scoped","kind":"identifier"}],"title":"Scoped","url":"\/documentation\/atoms\/scoped","type":"topic","abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"text":" ","type":"text"},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"navigatorTitle":[{"text":"Scoped","kind":"identifier"}],"role":"symbol"},"doc://Atoms/documentation/Atoms/Atom":{"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Atom","kind":"identifier"}],"url":"\/documentation\/atoms\/atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","navigatorTitle":[{"text":"Atom","kind":"identifier"}],"role":"symbol","type":"topic","title":"Atom"},"doc://Atoms/documentation/Atoms/KeepAlive":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"KeepAlive","kind":"identifier"}],"url":"\/documentation\/atoms\/keepalive","abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"type":"text","text":" "},{"text":"even after they are no longer watched.","type":"text"}],"type":"topic","title":"KeepAlive","navigatorTitle":[{"kind":"identifier","text":"KeepAlive"}],"role":"symbol"}}}