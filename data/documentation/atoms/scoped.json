{"seeAlsoSections":[{"title":"Attributes","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","doc:\/\/Atoms\/documentation\/Atoms\/Resettable"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scoped"}],"title":"Scoped","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:5Atoms6ScopedP","modules":[{"name":"Atoms"}],"navigatorTitle":[{"kind":"identifier","text":"Scoped"}]},"abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"type":"text","text":" "},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"sections":[],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Atom"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype"]},{"title":"Instance Properties","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d"]}],"variants":[{"paths":["\/documentation\/atoms\/scoped"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scoped"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","preciseIdentifier":"s:5Atoms4AtomP","text":"Atom"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If multiple scopes are nested, you can define an arbitrary "},{"type":"codeVoice","code":"scopeID"},{"type":"text","text":" to ensure that"},{"type":"text","text":" "},{"type":"text","text":"values are stored in a particular scope."},{"type":"text","text":" "},{"type":"text","text":"The atom with "},{"type":"codeVoice","code":"scopeID"},{"type":"text","text":" searches for the nearest "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope"},{"type":"text","text":" with the matching ID in"},{"type":"text","text":" "},{"type":"text","text":"ancestor views, and if not found, the state is shared within the app."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that other atoms that depend on the scoped atom will be in a shared state and must be"},{"type":"text","text":" "},{"type":"text","text":"given this attribute as well in order to scope them as well."}]},{"anchor":"Example","level":2,"type":"heading","text":"Example"},{"type":"codeListing","syntax":"swift","code":["struct SearchScopeID: Hashable {}","","struct SearchQueryAtom: StateAtom, Scoped, Hashable {","    var scopeID: SearchScopeID {","        SearchScopeID()","    }","","    func defaultValue(context: Context) -> String {","         \"\"","    }","}","","AtomScope(id: SearchScopeID()) {","    SearchPane()","}"]}]}],"references":{"doc://Atoms/documentation/Atoms/KeepAlive":{"role":"symbol","title":"KeepAlive","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeepAlive"}],"abstract":[{"type":"text","text":"An attribute protocol to allow the value of an atom to continue being retained"},{"type":"text","text":" "},{"type":"text","text":"even after they are no longer watched."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/KeepAlive","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"KeepAlive"}],"url":"\/documentation\/atoms\/keepalive"},"doc://Atoms/documentation/Atoms/Refreshable":{"role":"symbol","title":"Refreshable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Refreshable"}],"abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom refresh behavior."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Refreshable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Refreshable"}],"url":"\/documentation\/atoms\/refreshable"},"doc://Atoms/documentation/Atoms/Scoped":{"role":"symbol","title":"Scoped","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scoped"}],"abstract":[{"type":"text","text":"An attribute protocol to preserve the atom state in the scope nearest to the ancestor"},{"type":"text","text":" "},{"type":"text","text":"of where it is used and prevents it from being shared out of scope."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Scoped"}],"url":"\/documentation\/atoms\/scoped"},"doc://Atoms/documentation/Atoms/Atom":{"role":"symbol","title":"Atom","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Atom"}],"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Atom"}],"url":"\/documentation\/atoms\/atom"},"doc://Atoms/documentation/Atoms/AtomScope":{"role":"symbol","title":"AtomScope","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomScope"}],"abstract":[{"type":"text","text":"A view to override or monitor atoms in scope."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomScope","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AtomScope"}],"url":"\/documentation\/atoms\/atomscope"},"doc://Atoms/documentation/Atoms":{"role":"collection","title":"Atoms","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms","kind":"symbol","type":"topic","url":"\/documentation\/atoms"},"doc://Atoms/documentation/Atoms/Scoped/ScopeID-swift.associatedtype":{"role":"symbol","title":"ScopeID","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"ScopeID"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Hashable","preciseIdentifier":"s:SH"},{"kind":"text","text":" = "},{"kind":"typeIdentifier","text":"DefaultScopeID","preciseIdentifier":"s:5Atoms14DefaultScopeIDV"}],"abstract":[{"type":"text","text":"A type of the scope ID which is to find a matching scope."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/ScopeID-swift.associatedtype","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/atoms\/scoped\/scopeid-swift.associatedtype"},"doc://Atoms/documentation/Atoms/Resettable":{"role":"symbol","title":"Resettable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Resettable"}],"abstract":[{"type":"text","text":"An attribute protocol that allows an atom to have a custom reset behavior."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Resettable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Resettable"}],"url":"\/documentation\/atoms\/resettable"},"doc://Atoms/documentation/Atoms/Scoped/scopeID-2kb9d":{"defaultImplementations":1,"role":"symbol","title":"scopeID","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"scopeID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ScopeID"}],"abstract":[{"type":"text","text":"A scope ID which is to find a matching scope."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Scoped\/scopeID-2kb9d","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/atoms\/scoped\/scopeid-2kb9d"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"conformance":{"constraints":[{"type":"codeVoice","code":"Node"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Scoped"},{"type":"text","text":", "},{"type":"codeVoice","code":"Modifier"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomModifier"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Node.Produced"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Modifier.Base"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"ModifiedAtom","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ModifiedAtom"}],"abstract":[{"type":"text","text":"An atom type that applies a modifier to an atom."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ModifiedAtom"}],"url":"\/documentation\/atoms\/modifiedatom"}}}