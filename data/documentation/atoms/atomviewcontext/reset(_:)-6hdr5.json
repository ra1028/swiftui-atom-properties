{"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms","doc:\/\/Atoms\/documentation\/Atoms\/AtomViewContext"]]},"metadata":{"symbolKind":"method","title":"reset(_:)","role":"symbol","externalID":"s:5Atoms15AtomViewContextV5resetyyxAA0B0RzlF","modules":[{"name":"Atoms"}],"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reset","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Node"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Node"},{"kind":"text","text":")"}]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"@","kind":"attribute"},{"kind":"attribute","text":"MainActor","preciseIdentifier":"s:ScM"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reset"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Node"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"atom","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Node","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Node"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"typeIdentifier","text":"Atom","preciseIdentifier":"s:5Atoms4AtomP"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"An atom to reset."}],"type":"paragraph"}],"name":"atom"}]},{"content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method resets the value for the given atom and then notifies downstream"},{"text":" ","type":"text"},{"type":"text","text":"atoms and views. Thereafter, if any other atoms or views are watching the atom, a newly"},{"type":"text","text":" "},{"text":"generated value will be produced.","type":"text"}]},{"syntax":"swift","code":["let context = ...","print(context.watch(TextAtom())) \/\/ Prints \"Text\"","context[TextAtom()] = \"New text\"","print(context.read(TextAtom())) \/\/ Prints \"New text\"","context.reset(TextAtom())","print(context.read(TextAtom())) \/\/ Prints \"Text\""],"type":"codeListing"}],"kind":"content"}],"sections":[],"abstract":[{"type":"text","text":"Resets the value associated with the given atom, and then notifies."}],"variants":[{"paths":["\/documentation\/atoms\/atomviewcontext\/reset(_:)-6hdr5"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Atoms\/documentation\/Atoms\/AtomViewContext\/reset(_:)-6hdr5"},"references":{"doc://Atoms/documentation/Atoms/Atom":{"title":"Atom","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"navigatorTitle":[{"text":"Atom","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","url":"\/documentation\/atoms\/atom"},"doc://Atoms/documentation/Atoms/AtomViewContext/reset(_:)-6hdr5":{"type":"topic","url":"\/documentation\/atoms\/atomviewcontext\/reset(_:)-6hdr5","title":"reset(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reset","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Node"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"Node"},{"kind":"text","text":")"}],"kind":"symbol","abstract":[{"text":"Resets the value associated with the given atom, and then notifies.","type":"text"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomViewContext\/reset(_:)-6hdr5"},"doc://Atoms/documentation/Atoms":{"kind":"symbol","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms","url":"\/documentation\/atoms","type":"topic","role":"collection","title":"Atoms"},"doc://Atoms/documentation/Atoms/AtomViewContext":{"url":"\/documentation\/atoms\/atomviewcontext","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AtomViewContext","kind":"identifier"}],"abstract":[{"text":"A context structure to read, watch, and otherwise interact with atoms.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"AtomViewContext"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomViewContext","title":"AtomViewContext"}}}