{"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext\/reset(_:)-8u78a","interfaceLanguage":"swift"},"metadata":{"role":"symbol","modules":[{"name":"Atoms"}],"title":"reset(_:)","externalID":"s:5Atoms11AtomContextP5resetyyqd__AA0B0Rd__lF","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reset"},{"text":"(some ","kind":"text"},{"preciseIdentifier":"s:5Atoms4AtomP","text":"Atom","kind":"typeIdentifier"},{"kind":"text","text":")"}],"required":true,"roleHeading":"Instance Method"},"sections":[],"variants":[{"paths":["\/documentation\/atoms\/atomcontext\/reset(_:)-8u78a"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Resets the value associated with the given atom, and then notifies.","type":"text"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@"},{"kind":"attribute","text":"MainActor","preciseIdentifier":"s:ScM"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"reset","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"atom"},{"kind":"text","text":": some "},{"preciseIdentifier":"s:5Atoms4AtomP","text":"Atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","kind":"typeIdentifier"},{"text":")","kind":"text"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"atom","content":[{"inlineContent":[{"type":"text","text":"An atom to reset."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This method resets the value for the given atom and then notifies downstream","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"atoms and views. Thereafter, if any other atoms or views are watching the atom, a newly"},{"type":"text","text":" "},{"type":"text","text":"generated value will be produced."}]},{"type":"codeListing","code":["let context = ...","print(context.watch(TextAtom())) \/\/ Prints \"Text\"","context[TextAtom()] = \"New text\"","print(context.read(TextAtom())) \/\/ Prints \"New text\"","context.reset(TextAtom())","print(context.read(TextAtom())) \/\/ Prints \"Text\""],"syntax":"swift"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms","doc:\/\/Atoms\/documentation\/Atoms\/AtomContext"]]},"references":{"doc://Atoms/documentation/Atoms/AtomContext":{"kind":"symbol","url":"\/documentation\/atoms\/atomcontext","title":"AtomContext","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomContext"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext","type":"topic","abstract":[{"type":"text","text":"A context structure to read, write, and otherwise interact with atoms."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AtomContext","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/AtomContext/reset(_:)-8u78a":{"required":true,"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Resets the value associated with the given atom, and then notifies."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext\/reset(_:)-8u78a","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reset","kind":"identifier"},{"text":"(some ","kind":"text"},{"preciseIdentifier":"s:5Atoms4AtomP","kind":"typeIdentifier","text":"Atom"},{"kind":"text","text":")"}],"title":"reset(_:)","type":"topic","url":"\/documentation\/atoms\/atomcontext\/reset(_:)-8u78a"},"doc://Atoms/documentation/Atoms":{"title":"Atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","kind":"symbol","role":"collection","url":"\/documentation\/atoms","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"type":"topic"},"doc://Atoms/documentation/Atoms/Atom":{"url":"\/documentation\/atoms\/atom","abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"role":"symbol","title":"Atom","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Atom"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Atom","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom"}}}