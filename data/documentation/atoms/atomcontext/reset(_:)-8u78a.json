{"kind":"symbol","identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext\/reset(_:)-8u78a","interfaceLanguage":"swift"},"metadata":{"symbolKind":"method","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reset"},{"kind":"text","text":"(some "},{"kind":"typeIdentifier","text":"Atom","preciseIdentifier":"s:5Atoms4AtomP"},{"text":")","kind":"text"}],"modules":[{"name":"Atoms"}],"title":"reset(_:)","required":true,"externalID":"s:5Atoms11AtomContextP5resetyyqd__AA0B0Rd__lF","roleHeading":"Instance Method"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@","kind":"attribute"},{"preciseIdentifier":"s:ScM","kind":"attribute","text":"MainActor"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"reset","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"atom","kind":"internalParam"},{"kind":"text","text":": some "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","text":"Atom","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP"},{"kind":"text","text":")"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"An atom to reset.","type":"text"}]}],"name":"atom"}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"This method resets the value for the given atom and then notifies downstream","type":"text"},{"type":"text","text":" "},{"type":"text","text":"atoms and views. Thereafter, if any other atoms or views are watching the atom, a newly"},{"text":" ","type":"text"},{"type":"text","text":"generated value will be produced."}]},{"type":"codeListing","syntax":"swift","code":["let context = ...","print(context.watch(TextAtom())) \/\/ Prints \"Text\"","context[TextAtom()] = \"New text\"","print(context.read(TextAtom())) \/\/ Prints \"New text\"","context.reset(TextAtom())","print(context.read(TextAtom())) \/\/ Prints \"Text\""]}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms","doc:\/\/Atoms\/documentation\/Atoms\/AtomContext"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/atomcontext\/reset(_:)-8u78a"]}],"sections":[],"abstract":[{"type":"text","text":"Resets the value associated with the given atom, and then notifies."}],"references":{"doc://Atoms/documentation/Atoms/AtomContext/reset(_:)-8u78a":{"url":"\/documentation\/atoms\/atomcontext\/reset(_:)-8u78a","type":"topic","kind":"symbol","title":"reset(_:)","role":"symbol","abstract":[{"type":"text","text":"Resets the value associated with the given atom, and then notifies."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reset"},{"kind":"text","text":"(some "},{"text":"Atom","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP"},{"text":")","kind":"text"}],"required":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext\/reset(_:)-8u78a"},"doc://Atoms/documentation/Atoms/AtomContext":{"title":"AtomContext","abstract":[{"type":"text","text":"A context structure to read, write, and otherwise interact with atoms."}],"url":"\/documentation\/atoms\/atomcontext","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomContext"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AtomContext","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomContext"}]},"doc://Atoms/documentation/Atoms/Atom":{"title":"Atom","url":"\/documentation\/atoms\/atom","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Atom","kind":"identifier"}],"navigatorTitle":[{"text":"Atom","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","abstract":[{"text":"Declares that a type can produce a value that can be accessed from everywhere.","type":"text"}]},"doc://Atoms/documentation/Atoms":{"role":"collection","type":"topic","abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"kind":"symbol","title":"Atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","url":"\/documentation\/atoms"}}}