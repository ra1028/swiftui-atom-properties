{"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atoms\/watchstateobject"]}],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/WatchStateObject","interfaceLanguage":"swift"},"topicSections":[{"title":"Structures","generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/WatchStateObject\/Wrapper"],"anchor":"Structures"},{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/WatchStateObject\/init(_:fileID:line:)"],"title":"Initializers","anchor":"Initializers","generated":true},{"generated":true,"title":"Instance Properties","anchor":"Instance-Properties","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/WatchStateObject\/projectedValue","doc:\/\/Atoms\/documentation\/Atoms\/WatchStateObject\/wrappedValue"]}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"relationshipsSections":[{"identifiers":["doc:\/\/Atoms\/7SwiftUI15DynamicPropertyP"],"title":"Conforms To","type":"conformsTo","kind":"relationships"}],"seeAlsoSections":[{"title":"Property Wrappers","generated":true,"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/Watch","doc:\/\/Atoms\/documentation\/Atoms\/WatchState","doc:\/\/Atoms\/documentation\/Atoms\/ViewContext"],"anchor":"Property-Wrappers"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"attribute","text":"@propertyWrapper"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"WatchStateObject","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Node","kind":"genericParameter"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Node"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:5Atoms20ObservableObjectAtomP","kind":"typeIdentifier","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","text":"ObservableObjectAtom"}]}]},{"content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It starts watching the atom when the view accesses the "},{"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/WatchStateObject\/wrappedValue","isActive":true},{"type":"text","text":", and when the atom changes,"},{"type":"text","text":" "},{"text":"the view invalidates its appearance and recomputes the body.","type":"text"}]},{"inlineContent":[{"text":"See also ","type":"text"},{"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Watch","isActive":true},{"type":"text","text":" to have read-only access and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/WatchState"},{"text":" to write value of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/StateAtom"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The interface of this property wrapper follows "},{"type":"codeVoice","code":"@StateObject"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Example","text":"Example","level":2,"type":"heading"},{"type":"codeListing","syntax":"swift","code":["class Counter: ObservableObject {","    @Published var count = 0","","    func plus(_ value: Int) {","        count += value","    }","}","","struct CounterAtom: ObservableObjectAtom, Hashable {","    func object(context: Context) -> Counter {","        Counter()","    }","}","","struct CounterView: View {","    @WatchStateObject(CounterAtom())","    var counter","","    var body: some View {","        VStack {","            Text(\"Count: \\(counter.count)\")    \/\/ Read property, and start watching.","            Stepper(value: $counter.count) {}  \/\/ Use the property as a binding","            Button(\"+100\") {","                counter.plus(100)              \/\/ Call the method to update.","            }","        }","    }","}"]}],"kind":"content"}],"metadata":{"title":"WatchStateObject","navigatorTitle":[{"text":"WatchStateObject","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WatchStateObject"}],"roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:5Atoms16WatchStateObjectV","modules":[{"name":"Atoms"}]},"abstract":[{"type":"text","text":"A property wrapper type that can watch the given atom conforms to "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","isActive":true,"type":"reference"},{"type":"text","text":"."}],"references":{"doc://Atoms/documentation/Atoms/ViewContext":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewContext"}],"abstract":[{"type":"text","text":"A property wrapper type that provides a context structure to read, watch, and otherwise"},{"text":" ","type":"text"},{"type":"text","text":"interact with atoms from views."}],"title":"ViewContext","role":"symbol","kind":"symbol","url":"\/documentation\/atoms\/viewcontext","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ViewContext","navigatorTitle":[{"text":"ViewContext","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/ObservableObjectAtom":{"title":"ObservableObjectAtom","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ObservableObjectAtom","kind":"identifier"}],"type":"topic","url":"\/documentation\/atoms\/observableobjectatom","abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ObservableObjectAtom"}]},"doc://Atoms/documentation/Atoms/WatchStateObject/Wrapper":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Wrapper","kind":"identifier"}],"abstract":[{"type":"text","text":"A wrapper of the underlying observable object that can create bindings to"},{"type":"text","text":" "},{"type":"text","text":"its properties using dynamic member lookup."}],"title":"WatchStateObject.Wrapper","role":"symbol","kind":"symbol","url":"\/documentation\/atoms\/watchstateobject\/wrapper","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/WatchStateObject\/Wrapper","navigatorTitle":[{"kind":"identifier","text":"Wrapper"}]},"doc://Atoms/7SwiftUI15DynamicPropertyP":{"type":"unresolvable","identifier":"doc:\/\/Atoms\/7SwiftUI15DynamicPropertyP","title":"SwiftUICore.DynamicProperty"},"doc://Atoms/documentation/Atoms/Watch":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Watch"}],"abstract":[{"type":"text","text":"A property wrapper type that can watch and read-only access to the given atom."}],"title":"Watch","role":"symbol","kind":"symbol","url":"\/documentation\/atoms\/watch","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Watch","navigatorTitle":[{"text":"Watch","kind":"identifier"}]},"doc://Atoms/documentation/Atoms":{"kind":"symbol","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms","url":"\/documentation\/atoms","type":"topic","role":"collection","title":"Atoms"},"doc://Atoms/documentation/Atoms/WatchState":{"title":"WatchState","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WatchState"}],"type":"topic","url":"\/documentation\/atoms\/watchstate","abstract":[{"text":"A property wrapper type that can watch and read-write access to the given atom conforms","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/StateAtom"},{"type":"text","text":"."}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/WatchState","role":"symbol","navigatorTitle":[{"text":"WatchState","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/WatchStateObject/projectedValue":{"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"projectedValue"},{"kind":"text","text":": "},{"text":"WatchStateObject","preciseIdentifier":"s:5Atoms16WatchStateObjectV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Node","kind":"typeIdentifier"},{"kind":"text","text":">."},{"text":"Wrapper","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms16WatchStateObjectV7WrapperV"}],"abstract":[{"type":"text","text":"A projection of the state object that creates bindings to its properties."}],"title":"projectedValue","role":"symbol","kind":"symbol","url":"\/documentation\/atoms\/watchstateobject\/projectedvalue","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/WatchStateObject\/projectedValue"},"doc://Atoms/documentation/Atoms/StateAtom":{"title":"StateAtom","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"StateAtom","kind":"identifier"}],"type":"topic","url":"\/documentation\/atoms\/stateatom","abstract":[{"type":"text","text":"An atom type that provides a read-write state value."}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"StateAtom"}]},"doc://Atoms/documentation/Atoms/WatchStateObject/wrappedValue":{"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"wrappedValue"},{"text":": ","kind":"text"},{"text":"Node","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:5Atoms20ObservableObjectAtomP0C4TypeQa","text":"ObjectType"}],"abstract":[{"type":"text","text":"The underlying observable object associated with the given atom."}],"title":"wrappedValue","role":"symbol","kind":"symbol","url":"\/documentation\/atoms\/watchstateobject\/wrappedvalue","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/WatchStateObject\/wrappedValue"},"doc://Atoms/documentation/Atoms/WatchStateObject/init(_:fileID:line:)":{"title":"init(_:fileID:line:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"Node","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","url":"\/documentation\/atoms\/watchstateobject\/init(_:fileid:line:)","abstract":[{"type":"text","text":"Creates an instance with the atom to watch."}],"kind":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/WatchStateObject\/init(_:fileID:line:)","role":"symbol"},"doc://Atoms/documentation/Atoms/WatchStateObject":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WatchStateObject","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper type that can watch the given atom conforms to "},{"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","isActive":true},{"text":".","type":"text"}],"title":"WatchStateObject","role":"symbol","kind":"symbol","url":"\/documentation\/atoms\/watchstateobject","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/WatchStateObject","navigatorTitle":[{"text":"WatchStateObject","kind":"identifier"}]}}}