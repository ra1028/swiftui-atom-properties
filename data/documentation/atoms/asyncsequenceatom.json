{"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"metadata":{"modules":[{"name":"Atoms"}],"symbolKind":"protocol","roleHeading":"Protocol","externalID":"s:5Atoms17AsyncSequenceAtomP","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"AsyncSequenceAtom","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSequenceAtom","kind":"identifier"}],"role":"symbol","title":"AsyncSequenceAtom"},"topicSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom\/Sequence"],"generated":true,"anchor":"Associated-Types","title":"Associated Types"},{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom\/sequence(context:)"],"title":"Instance Methods","anchor":"Instance-Methods","generated":true}],"relationshipsSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom","doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"title":"Inherits From","type":"inheritsFrom","kind":"relationships"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncSequenceAtom"},{"text":" : ","kind":"text"},{"text":"AsyncAtom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms9AsyncAtomP"}],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The sequential elements emitted by the ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" will be converted into an enum representation"},{"type":"text","text":" "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true,"type":"reference"},{"text":" that changes overtime. When the sequence emits new elements, it notifies changes to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"downstream atoms and views, so that they can consume it without suspension points which spawn with"},{"type":"text","text":" "},{"type":"codeVoice","code":"await"},{"text":" keyword.","type":"text"}]},{"text":"Output Value","anchor":"Output-Value","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true},{"type":"text","text":"<Self.Sequence.Element, any Error>"}]},{"anchor":"Example","text":"Example","level":2,"type":"heading"},{"code":["struct QuakeMonitorAtom: AsyncSequenceAtom, Hashable {","    func sequence(context: Context) -> AsyncStream<Quake> {","        AsyncStream { continuation in","            let monitor = QuakeMonitor()","            monitor.quakeHandler = { quake in","                continuation.yield(quake)","            }","            continuation.onTermination = { @Sendable _ in","                monitor.stopMonitoring()","            }","            monitor.startMonitoring()","        }","    }","}","","struct QuakeMonitorView: View {","    @Watch(QuakeMonitorAtom())","    var quakes","","    var body: some View {","        switch quakes {","        case .suspending, .failure:","            Text(\"Calm\")","","        case .success(let quake):","            Text(\"Quake: \\(quake.date)\")","        }","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"seeAlsoSections":[{"title":"Atoms","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"generated":true,"anchor":"Atoms"}],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","interfaceLanguage":"swift"},"kind":"symbol","variants":[{"paths":["\/documentation\/atoms\/asyncsequenceatom"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"An atom type that provides asynchronous, sequential elements of the given ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"as an "},{"isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","type":"reference"},{"type":"text","text":" value."}],"references":{"doc://Atoms/documentation/Atoms/AsyncPhaseAtom":{"navigatorTitle":[{"kind":"identifier","text":"AsyncPhaseAtom"}],"kind":"symbol","url":"\/documentation\/atoms\/asyncphaseatom","type":"topic","title":"AsyncPhaseAtom","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","abstract":[{"type":"text","text":"An atom that provides an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase"},{"type":"text","text":" value from the asynchronous throwable function."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncPhaseAtom"}]},"doc://Atoms/documentation/Atoms/AsyncSequenceAtom/sequence(context:)":{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom\/sequence(context:)","type":"topic","kind":"symbol","required":true,"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"sequence","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Context","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms4AtomP7Contexta"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:5Atoms17AsyncSequenceAtomP0C0Qa","kind":"typeIdentifier","text":"Sequence"}],"title":"sequence(context:)","role":"symbol","abstract":[{"text":"Creates an asynchronous sequence to be started when this atom is actually used.","type":"text"}],"url":"\/documentation\/atoms\/asyncsequenceatom\/sequence(context:)"},"doc://Atoms/documentation/Atoms/AsyncSequenceAtom":{"navigatorTitle":[{"text":"AsyncSequenceAtom","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/atoms\/asyncsequenceatom","type":"topic","title":"AsyncSequenceAtom","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","abstract":[{"text":"An atom type that provides asynchronous, sequential elements of the given ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":" ","type":"text"},{"type":"text","text":"as an "},{"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true},{"type":"text","text":" value."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AsyncSequenceAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/StateAtom":{"abstract":[{"type":"text","text":"An atom type that provides a read-write state value."}],"navigatorTitle":[{"kind":"identifier","text":"StateAtom"}],"role":"symbol","url":"\/documentation\/atoms\/stateatom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","kind":"symbol","type":"topic","title":"StateAtom","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"StateAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/AsyncAtom":{"url":"\/documentation\/atoms\/asyncatom","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncAtom","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom","abstract":[{"type":"text","text":"Declares that a type can produce a refreshable value that can be accessed from everywhere."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncAtom"}],"kind":"symbol","title":"AsyncAtom"},"doc://Atoms/documentation/Atoms/PublisherAtom":{"url":"\/documentation\/atoms\/publisheratom","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","abstract":[{"type":"text","text":"An atom type that provides a sequence of values of the given "},{"type":"codeVoice","code":"Publisher"},{"text":" as an ","type":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true,"type":"reference"},{"type":"text","text":" value."}],"title":"PublisherAtom","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PublisherAtom"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PublisherAtom"}]},"doc://Atoms/documentation/Atoms/ThrowingTaskAtom":{"navigatorTitle":[{"kind":"identifier","text":"ThrowingTaskAtom"}],"kind":"symbol","url":"\/documentation\/atoms\/throwingtaskatom","type":"topic","title":"ThrowingTaskAtom","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","abstract":[{"type":"text","text":"An atom type that provides a throwing "},{"code":"Task","type":"codeVoice"},{"type":"text","text":" from the given asynchronous, throwing function."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ThrowingTaskAtom"}]},"doc://Atoms/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Atoms\/s8SendableP","title":"Swift.Sendable"},"doc://Atoms/documentation/Atoms/AsyncPhase":{"url":"\/documentation\/atoms\/asyncphase","navigatorTitle":[{"kind":"identifier","text":"AsyncPhase"}],"kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncPhase"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","type":"topic","abstract":[{"type":"text","text":"A value that represents a success, a failure, or a state in which the result of"},{"type":"text","text":" "},{"type":"text","text":"asynchronous process has not yet been determined."}],"title":"AsyncPhase"},"doc://Atoms/documentation/Atoms":{"type":"topic","url":"\/documentation\/atoms","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Atomic approach state management and dependency injection for SwiftUI"}],"title":"Atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms"},"doc://Atoms/documentation/Atoms/AsyncSequenceAtom/Sequence":{"type":"topic","required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"},{"kind":"text","text":" : "},{"text":"AsyncSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sci"}],"url":"\/documentation\/atoms\/asyncsequenceatom\/sequence","kind":"symbol","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom\/Sequence","title":"Sequence","abstract":[{"text":"The type of asynchronous sequence that this atom manages.","type":"text"}]},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"navigatorTitle":[{"kind":"identifier","text":"ModifiedAtom"}],"kind":"symbol","url":"\/documentation\/atoms\/modifiedatom","type":"topic","title":"ModifiedAtom","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","abstract":[{"text":"An atom type that applies a modifier to an atom.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ModifiedAtom","kind":"identifier"}]},"doc://Atoms/documentation/Atoms/Atom":{"type":"topic","url":"\/documentation\/atoms\/atom","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Atom"}],"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"navigatorTitle":[{"kind":"identifier","text":"Atom"}],"title":"Atom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom"},"doc://Atoms/documentation/Atoms/TaskAtom":{"url":"\/documentation\/atoms\/taskatom","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","abstract":[{"type":"text","text":"An atom type that provides a nonthrowing "},{"type":"codeVoice","code":"Task"},{"type":"text","text":" from the given asynchronous function."}],"title":"TaskAtom","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskAtom"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TaskAtom"}]},"doc://Atoms/documentation/Atoms/ObservableObjectAtom":{"url":"\/documentation\/atoms\/observableobjectatom","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}],"title":"ObservableObjectAtom","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableObjectAtom"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ObservableObjectAtom"}]},"doc://Atoms/documentation/Atoms/ValueAtom":{"navigatorTitle":[{"kind":"identifier","text":"ValueAtom"}],"kind":"symbol","url":"\/documentation\/atoms\/valueatom","type":"topic","title":"ValueAtom","role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","abstract":[{"text":"An atom type that provides a read-only value.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ValueAtom","kind":"identifier"}]}}}