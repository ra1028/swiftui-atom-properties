{"seeAlsoSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom","doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom"],"anchor":"Atoms","title":"Atoms","generated":true}],"identifier":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","interfaceLanguage":"swift"},"topicSections":[{"title":"Associated Types","generated":true,"anchor":"Associated-Types","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom\/Success"]},{"title":"Instance Methods","identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom\/value(context:)"],"anchor":"Instance-Methods","generated":true}],"schemaVersion":{"major":0,"patch":0,"minor":3},"relationshipsSections":[{"identifiers":["doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom","doc:\/\/Atoms\/documentation\/Atoms\/Atom","doc:\/\/Atoms\/s8SendableP"],"title":"Inherits From","kind":"relationships","type":"inheritsFrom"}],"sections":[],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TaskAtom","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"AsyncAtom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms9AsyncAtomP"}],"languages":["swift"]}]},{"content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"This atom guarantees that the task to be identical instance and its state can be shared","type":"text"},{"text":" ","type":"text"},{"text":"at anywhere even when they are accessed simultaneously from multiple locations.","type":"text"}]},{"style":"note","name":"See Also","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"name":"See Also","content":[{"inlineContent":[{"type":"text","text":""},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Suspense"}],"type":"paragraph"}],"type":"aside","style":"note"},{"level":2,"anchor":"Output-Value","text":"Output Value","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Task<Self.Value, Never>","type":"text"}]},{"type":"heading","level":2,"text":"Example","anchor":"Example"},{"code":["struct AsyncTextAtom: TaskAtom, Hashable {","    func value(context: Context) async -> String {","        try? await Task.sleep(nanoseconds: 1_000_000_000)","        return \"Swift\"","    }","}","","struct DelayedTitleView: View {","    @Watch(AsyncTextAtom())","    var text","","    var body: some View {","        Suspense(text) { text in","            Text(text)","        } suspending: {","            Text(\"Loading...\")","        }","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/atoms\/taskatom"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Atoms\/documentation\/Atoms"]]},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"TaskAtom"}],"title":"TaskAtom","roleHeading":"Protocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TaskAtom","kind":"identifier"}],"externalID":"s:5Atoms8TaskAtomP","modules":[{"name":"Atoms"}],"role":"symbol","symbolKind":"protocol"},"abstract":[{"text":"An atom type that provides a nonthrowing ","type":"text"},{"type":"codeVoice","code":"Task"},{"type":"text","text":" from the given asynchronous function."}],"references":{"doc://Atoms/documentation/Atoms/ThrowingTaskAtom":{"abstract":[{"type":"text","text":"An atom type that provides a throwing "},{"code":"Task","type":"codeVoice"},{"type":"text","text":" from the given asynchronous, throwing function."}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ThrowingTaskAtom","kind":"identifier"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ThrowingTaskAtom"}],"title":"ThrowingTaskAtom","role":"symbol","url":"\/documentation\/atoms\/throwingtaskatom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ThrowingTaskAtom"},"doc://Atoms/documentation/Atoms/AsyncPhase":{"url":"\/documentation\/atoms\/asyncphase","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","abstract":[{"text":"A value that represents a success, a failure, or a state in which the result of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"asynchronous process has not yet been determined."}],"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncPhase","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncPhase","kind":"identifier"}],"title":"AsyncPhase","kind":"symbol","role":"symbol"},"doc://Atoms/documentation/Atoms/AsyncPhaseAtom":{"abstract":[{"text":"An atom that provides an ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase"},{"type":"text","text":" value from the asynchronous throwable function."}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncPhaseAtom"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncPhaseAtom"}],"title":"AsyncPhaseAtom","role":"symbol","url":"\/documentation\/atoms\/asyncphaseatom","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhaseAtom"},"doc://Atoms/documentation/Atoms":{"url":"\/documentation\/atoms","identifier":"doc:\/\/Atoms\/documentation\/Atoms","abstract":[{"text":"Atomic approach state management and dependency injection for SwiftUI","type":"text"}],"type":"topic","kind":"symbol","title":"Atoms","role":"collection"},"doc://Atoms/documentation/Atoms/AsyncAtom":{"url":"\/documentation\/atoms\/asyncatom","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncAtom","kind":"identifier"}],"abstract":[{"text":"Declares that a type can produce a refreshable value that can be accessed from everywhere.","type":"text"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom","navigatorTitle":[{"kind":"identifier","text":"AsyncAtom"}],"title":"AsyncAtom","role":"symbol","type":"topic","kind":"symbol"},"doc://Atoms/documentation/Atoms/ModifiedAtom":{"abstract":[{"type":"text","text":"An atom type that applies a modifier to an atom."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ModifiedAtom"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ModifiedAtom","role":"symbol","navigatorTitle":[{"text":"ModifiedAtom","kind":"identifier"}],"url":"\/documentation\/atoms\/modifiedatom","title":"ModifiedAtom","kind":"symbol"},"doc://Atoms/documentation/Atoms/AsyncSequenceAtom":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"AsyncSequenceAtom","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncSequenceAtom"}],"url":"\/documentation\/atoms\/asyncsequenceatom","title":"AsyncSequenceAtom","abstract":[{"type":"text","text":"An atom type that provides asynchronous, sequential elements of the given "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" "},{"type":"text","text":"as an "},{"type":"reference","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true},{"type":"text","text":" value."}]},"doc://Atoms/documentation/Atoms/ObservableObjectAtom":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ObservableObjectAtom","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","role":"symbol","navigatorTitle":[{"text":"ObservableObjectAtom","kind":"identifier"}],"url":"\/documentation\/atoms\/observableobjectatom","title":"ObservableObjectAtom","abstract":[{"type":"text","text":"An atom type that instantiates an observable object."}]},"doc://Atoms/documentation/Atoms/StateAtom":{"url":"\/documentation\/atoms\/stateatom","title":"StateAtom","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"StateAtom","kind":"identifier"}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/StateAtom","navigatorTitle":[{"text":"StateAtom","kind":"identifier"}],"role":"symbol","kind":"symbol","abstract":[{"text":"An atom type that provides a read-write state value.","type":"text"}]},"doc://Atoms/documentation/Atoms/TaskAtom/value(context:)":{"role":"symbol","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom\/value(context:)","title":"value(context:)","type":"topic","kind":"symbol","required":true,"url":"\/documentation\/atoms\/taskatom\/value(context:)","abstract":[{"text":"Asynchronously produces a value to be provided via this atom.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"value","kind":"identifier"},{"kind":"text","text":"("},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:5Atoms4AtomP7Contexta","kind":"typeIdentifier","text":"Context"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Success","kind":"typeIdentifier","preciseIdentifier":"s:5Atoms8TaskAtomP7SuccessQa"}]},"doc://Atoms/documentation/Atoms/Suspense":{"url":"\/documentation\/atoms\/suspense","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Suspense","kind":"identifier"}],"abstract":[{"type":"text","text":"A view that lets the content wait for the given task to provide a resulting value"},{"type":"text","text":" "},{"type":"text","text":"or an error."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Suspense","navigatorTitle":[{"text":"Suspense","kind":"identifier"}],"title":"Suspense","role":"symbol","type":"topic","kind":"symbol"},"doc://Atoms/documentation/Atoms/Atom":{"abstract":[{"type":"text","text":"Declares that a type can produce a value that can be accessed from everywhere."}],"role":"symbol","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","navigatorTitle":[{"text":"Atom","kind":"identifier"}],"url":"\/documentation\/atoms\/atom","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Atom","kind":"identifier"}],"title":"Atom","kind":"symbol"},"doc://Atoms/s8SendableP":{"identifier":"doc:\/\/Atoms\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Atoms/documentation/Atoms/TaskAtom":{"abstract":[{"text":"An atom type that provides a nonthrowing ","type":"text"},{"type":"codeVoice","code":"Task"},{"text":" from the given asynchronous function.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TaskAtom","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom","role":"symbol","navigatorTitle":[{"text":"TaskAtom","kind":"identifier"}],"url":"\/documentation\/atoms\/taskatom","title":"TaskAtom","kind":"symbol"},"doc://Atoms/documentation/Atoms/PublisherAtom":{"kind":"symbol","url":"\/documentation\/atoms\/publisheratom","navigatorTitle":[{"text":"PublisherAtom","kind":"identifier"}],"title":"PublisherAtom","type":"topic","abstract":[{"text":"An atom type that provides a sequence of values of the given ","type":"text"},{"type":"codeVoice","code":"Publisher"},{"type":"text","text":" as an "},{"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncPhase","isActive":true,"type":"reference"},{"type":"text","text":" value."}],"identifier":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"PublisherAtom","kind":"identifier"}],"role":"symbol"},"doc://Atoms/documentation/Atoms/ValueAtom":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ValueAtom","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/ValueAtom","role":"symbol","navigatorTitle":[{"text":"ValueAtom","kind":"identifier"}],"url":"\/documentation\/atoms\/valueatom","title":"ValueAtom","abstract":[{"type":"text","text":"An atom type that provides a read-only value."}]},"doc://Atoms/documentation/Atoms/TaskAtom/Success":{"title":"Success","kind":"symbol","required":true,"url":"\/documentation\/atoms\/taskatom\/success","type":"topic","identifier":"doc:\/\/Atoms\/documentation\/Atoms\/TaskAtom\/Success","abstract":[{"text":"The type of success value that this atom produces.","type":"text"}],"role":"symbol","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Success"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"}]}}}